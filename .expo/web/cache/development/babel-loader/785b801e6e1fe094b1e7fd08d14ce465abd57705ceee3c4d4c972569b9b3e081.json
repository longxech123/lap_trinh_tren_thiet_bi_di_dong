{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _CardStyleInterpolators = require(\"../../TransitionConfigs/CardStyleInterpolators\");\nvar _TransitionPresets = require(\"../../TransitionConfigs/TransitionPresets\");\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\nvar _Screens = require(\"../Screens\");\nvar _Card = require(\"./Card\");\nvar _CardContainer = _interopRequireDefault(require(\"./CardContainer\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) { if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } } return n.default = e, t && t.set(e, n), n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = (0, _Card.getIsModalPresentation)(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = _reactNative.StyleSheet.flatten(headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : (0, _elements.getDefaultHeaderHeight)(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    presentation = _ref.presentation,\n    _ref$gestureDirection = _ref.gestureDirection,\n    gestureDirection = _ref$gestureDirection === void 0 ? presentation === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref$gestureDirection;\n  return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  (0, _inherits2.default)(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleHeaderLayout\", function (_ref2) {\n      var route = _ref2.route,\n        height = _ref2.height;\n      _this.setState(function (_ref3) {\n        var headerHeights = _ref3.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, (0, _defineProperty3.default)({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPreviousScene\", function (_ref4) {\n      var route = _ref4.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: _elements.SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        isParentModal = _this$props.isParentModal,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : (0, _Card.getIsModalPresentation)(options.cardStyleInterpolator) ? i !== scenes.map(function (scene) {\n            return scene.descriptor.options.cardStyleInterpolator;\n          }).lastIndexOf(_CardStyleInterpolators.forModalPresentationIOS) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(_elements.Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(_Screens.MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n          headerTransparent = _scene$descriptor$opt2.headerTransparent,\n          headerStyle = _scene$descriptor$opt2.headerStyle,\n          headerTintColor = _scene$descriptor$opt2.headerTintColor;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var _ref5 = _reactNative.StyleSheet.flatten(headerStyle) || {},\n          headerBackgroundColor = _ref5.backgroundColor;\n        var headerDarkContent;\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = (0, _color.default)(headerTintColor).isDark();\n          } else if (typeof headerBackgroundColor === 'string') {\n            headerDarkContent = !(0, _color.default)(headerBackgroundColor).isDark();\n          }\n        }\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(_Screens.MaybeScreen, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(_CardContainer.default, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref6 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref6.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? _TransitionPresets.ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? _TransitionPresets.ModalFadeTransition : _TransitionPresets.DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n          animationEnabled = _optionsForTransition === void 0 ? _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos' : _optionsForTransition,\n          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? _reactNative.Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? _reactNative.Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator)) && _reactNative.Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexports.default = CardStack;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["_elements","require","_color","_interopRequireDefault","React","_interopRequireWildcard","_reactNative","_CardStyleInterpolators","_TransitionPresets","_getDistanceForDirection","_Screens","_Card","_CardContainer","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ownKeys","keys","getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty3","getOwnPropertyDescriptors","defineProperties","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","_scenes$i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","getIsModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","_curr$descriptor$opti","_curr$descriptor$opti2","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","key","getDefaultHeaderHeight","getDistanceFromOptions","_ref","presentation","_ref$gestureDirection","gestureDirection","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits2","_super","_props","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","_e$nativeEvent$layout","nativeEvent","setState","state","props","headerHeights","_ref2","_ref3","previousHeight","routes","_ref4","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","SafeAreaProviderCompat","initialMetrics","frame","descriptors","_createClass2","value","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","Platform","OS","_this$state","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","_scene$descriptor$opt","headerMode","headerTransparent","_options$headerShown","headerShown","activeScreensLimit","_options$detachPrevio","detachPreviousScreen","map","lastIndexOf","forModalPresentationIOS","floatingHeader","createElement","Fragment","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","Background","MaybeScreenContainer","enabled","container","onLayout","handleLayout","self","_scenes","_scenes2","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","_scene$descriptor$opt2","_scene$descriptor$opt3","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","_ref5","headerBackgroundColor","backgroundColor","headerDarkContent","Color","isDark","isNextScreenTransparent","detachCurrentScreen","MaybeScreen","absoluteFill","active","pointerEvents","CardContainer","modal","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","getDerivedStateFromProps","_ref6","animationEnabled","Animated","Value","openingRouteKeys","_descriptor$options$h","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","ModalFadeTransition","_optionsForTransition","_optionsForTransition2","gestureEnabled","_optionsForTransition3","_optionsForTransition4","transitionSpec","_optionsForTransition5","forNoAnimationCard","_optionsForTransition6","headerStyleInterpolator","_optionsForTransition7","cardOverlayEnabled","header","next","__memo","every","it","Component","exports","create","flex","position","zIndex"],"sources":["C:\\Users\\DELL\\Downloads\\ltmobile\\ltmobile\\muvi-master\\node_modules\\@react-navigation\\stack\\lib\\module\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":";;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAUA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,KAAA,GAAAC,uBAAA,CAAAJ,OAAA;AACA,IAAAK,YAAA,GAAAL,OAAA;AAQA,IAAAM,uBAAA,GAAAN,OAAA;AAIA,IAAAO,kBAAA,GAAAP,OAAA;AAaA,IAAAQ,wBAAA,GAAAN,sBAAA,CAAAF,OAAA;AAEA,IAAAS,QAAA,GAAAT,OAAA;AACA,IAAAU,KAAA,GAAAV,OAAA;AACA,IAAAW,cAAA,GAAAT,sBAAA,CAAAF,OAAA;AAAA,SAAAY,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAT,wBAAAS,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,sBAAAc,CAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAjB,CAAA,EAAAc,CAAA,SAAAI,CAAA,GAAAR,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAI,CAAA,KAAAA,CAAA,CAAAX,GAAA,IAAAW,CAAA,CAAAC,GAAA,IAAAR,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAI,CAAA,IAAAV,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,cAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAgB,GAAA,CAAAnB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AAAA,SAAAY,QAAApB,CAAA,EAAAE,CAAA,QAAAC,CAAA,GAAAQ,MAAA,CAAAU,IAAA,CAAArB,CAAA,OAAAW,MAAA,CAAAW,qBAAA,QAAAC,CAAA,GAAAZ,MAAA,CAAAW,qBAAA,CAAAtB,CAAA,GAAAE,CAAA,KAAAqB,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAtB,CAAA,WAAAS,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAE,CAAA,EAAAuB,UAAA,OAAAtB,CAAA,CAAAuB,IAAA,CAAAC,KAAA,CAAAxB,CAAA,EAAAoB,CAAA,YAAApB,CAAA;AAAA,SAAAyB,cAAA5B,CAAA,aAAAE,CAAA,MAAAA,CAAA,GAAA2B,SAAA,CAAAC,MAAA,EAAA5B,CAAA,UAAAC,CAAA,WAAA0B,SAAA,CAAA3B,CAAA,IAAA2B,SAAA,CAAA3B,CAAA,QAAAA,CAAA,OAAAkB,OAAA,CAAAT,MAAA,CAAAR,CAAA,OAAA4B,OAAA,WAAA7B,CAAA,QAAA8B,gBAAA,CAAA3B,OAAA,EAAAL,CAAA,EAAAE,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAS,MAAA,CAAAsB,yBAAA,GAAAtB,MAAA,CAAAuB,gBAAA,CAAAlC,CAAA,EAAAW,MAAA,CAAAsB,yBAAA,CAAA9B,CAAA,KAAAiB,OAAA,CAAAT,MAAA,CAAAR,CAAA,GAAA4B,OAAA,WAAA7B,CAAA,IAAAS,MAAA,CAAAC,cAAA,CAAAZ,CAAA,EAAAE,CAAA,EAAAS,MAAA,CAAAE,wBAAA,CAAAV,CAAA,EAAAD,CAAA,iBAAAF,CAAA;AAAA,SAAAmC,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAC,gBAAA,CAAApC,OAAA,EAAA+B,OAAA,GAAAM,MAAA,MAAAL,yBAAA,QAAAM,SAAA,OAAAF,gBAAA,CAAApC,OAAA,QAAAuC,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAN,KAAA,EAAAX,SAAA,EAAAc,SAAA,YAAAD,MAAA,GAAAF,KAAA,CAAAb,KAAA,OAAAE,SAAA,gBAAAkB,2BAAA,CAAA1C,OAAA,QAAAqC,MAAA;AAAA,SAAAJ,0BAAA,eAAAO,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAE,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAnC,SAAA,CAAAoC,OAAA,CAAAlC,IAAA,CAAA4B,OAAA,CAAAC,SAAA,CAAAI,OAAA,8CAAAlD,CAAA;;;;;;;;;;;;;;AA0CA,IAAMoD,OAAO,GAAG,IAAhB;AAEA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,gCAAgC,GAAG,CAAzC;AACA,IAAMC,YAAY,GAAG,CAArB;AAEA,IAAMC,mBAAmB,GAAG7C,MAAM,CAAC8C,MAAP,CAAc;EAAEC,OAAO,EAAE;AAAX,CAAd,CAA5B;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,MAAD,EAAkBC,KAAlB,EAAoC;EAChE,IAAQC,qBAAA,GAA0BF,MAAM,CAACC,KAAD,CAAN,CAAcE,UAAd,CAAyBL,OAA3D,CAAQI,qBAAA;EAGR,IAAIE,kBAAkB,GAAG,CAAzB;EAEA,KAAK,IAAI9C,CAAC,GAAG2C,KAAK,GAAG,CAArB,EAAwB3C,CAAC,IAAI,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;IAAA,IAAA+C,SAAA;IACnC,IAAMC,4BAA4B,IAAAD,SAAA,GAChCL,MAAM,CAAC1C,CAAD,CAD0B,cAAA+C,SAAA,uBAChCA,SAAA,CAAWF,UAAX,CAAsBL,OAAtB,CAA8BI,qBADhC;IAGA,IAAII,4BAA4B,KAAKJ,qBAArC,EAA4D;MAC1D;IACD;IAEDE,kBAAkB;EACnB;EAED,OAAOA,kBAAP;AACD,CAlBD;AAoBA,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CACdC,KADiB,EAEjBJ,kBAFiB,EAGjBK,aAHiB,EAId;EACH,IAAIA,aAAJ,EAAmB;IACjB,OAAO,IAAP;EACD;EAED,IAAQP,qBAAA,GAA0BM,KAAK,CAACL,UAAN,CAAiBL,OAAnD,CAAQI,qBAAA;EACR,IAAMQ,mBAAmB,GAAG,IAAAC,4BAAsB,EAACT,qBAAD,CAAlD;EACA,IAAMU,OAAO,GAAGF,mBAAmB,IAAIN,kBAAkB,KAAK,CAA9D;EAEA,OAAOQ,OAAP;AACD,CAdD;AAgBA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpBb,MADuB,EAEvBc,MAFuB,EAGvBC,mBAHuB,EAIvBN,aAJuB,EAKvBO,MALuB,EAMvBC,QANuB,EAOpB;EACH,OAAOjB,MAAM,CAACkB,MAAP,CAAsC,UAACC,GAAD,EAAMC,IAAN,EAAYnB,KAAZ,EAAsB;IACjE,IAAAoB,qBAAA,GAGID,IAAI,CAACjB,UAAL,CAAgBL,OAHpB;MAAAwB,sBAAA,GAAAD,qBAAA,CACEE,qBAAqB;MAArBA,qBAAqB,GAAAD,sBAAA,cAAGP,mBAAmB,GAAG,CAAH,GAAOD,MAAM,CAACU,GADrD,GAAAF,sBAAA;MAEJG,WAAA,GAAAJ,qBAAA,CAAAI,WAAA;IAGF,IAAMC,KAAK,GAAGC,uBAAU,CAACC,OAAX,CAAmBH,WAAW,IAAI,EAAlC,CAAd;IAEA,IAAMI,MAAM,GACV,OAAOH,KAAK,CAACG,MAAb,KAAwB,QAAxB,GACIH,KAAK,CAACG,MADV,GAEIZ,QAAQ,CAACG,IAAI,CAACU,KAAL,CAAWC,GAAZ,CAHd;IAKA,IAAM3B,kBAAkB,GAAGL,qBAAqB,CAACC,MAAD,EAASC,KAAT,CAAhD;IACA,IAAMW,OAAO,GAAGL,UAAU,CAACa,IAAD,EAAOhB,kBAAP,EAA2BK,aAA3B,CAA1B;IAEAU,GAAG,CAACC,IAAI,CAACU,KAAL,CAAWC,GAAZ,CAAH,GACE,OAAOF,MAAP,KAAkB,QAAlB,GACIA,MADJ,GAEI,IAAAG,gCAAsB,EAAChB,MAAD,EAASJ,OAAT,EAAkBW,qBAAlB,CAH5B;IAKA,OAAOJ,GAAP;EACD,CAtBM,EAsBJ,EAtBI,CAAP;AAuBD,CA/BD;AAiCA,IAAMc,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAC1BjB,MAD6B,EAE7Bb,UAF6B,EAG1B;EACH,IAAA+B,IAAA,GAKK,CAAA/B,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEL,OAAZ,KAAuB,EAL5B;IACEqC,YADI,GAAAD,IAAA,CACJC,YADI;IAAAC,qBAAA,GAAAF,IAAA,CAEJG,gBAAgB;IAAhBA,gBAAgB,GAAAD,qBAAA,cAAGD,YAAY,KAAK,OAAjB,GACfG,kCAAe,CAACD,gBADD,GAEfE,oCAAiB,CAACF,gBAAA,GAAAD,qBAAA;EAGxB,OAAO,IAAAI,gCAAuB,EAACxB,MAAD,EAASqB,gBAAT,CAA9B;AACD,CAZD;AAcA,IAAMI,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAC1BC,OAD6B,EAE7B1B,MAF6B,EAG7Bb,UAH6B,EAI1B;EACH,IAAMwC,QAAQ,GAAGV,sBAAsB,CACrC;IAGEW,KAAK,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY9B,MAAM,CAAC4B,KAAnB,CAHT;IAIEf,MAAM,EAAEgB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY9B,MAAM,CAACa,MAAnB;EAJV,CADqC,EAOrC1B,UAPqC,CAAvC;EAUA,IAAIwC,QAAQ,GAAG,CAAf,EAAkB;IAChB,OAAOD,OAAO,CAACK,WAAR,CAAoB;MACzBC,UAAU,EAAE,CAAC,CAAD,EAAIL,QAAJ,CADa;MAEzBM,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;IAFY,CAApB,CAAP;EAID;EAED,OAAOP,OAAO,CAACK,WAAR,CAAoB;IACzBC,UAAU,EAAE,CAACL,QAAD,EAAW,CAAX,CADa;IAEzBM,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;EAFY,CAApB,CAAP;AAID,CA1BD;AAAA,IA4BqBC,SAAN,aAAAC,gBAAA;EAAA,IAAAC,UAAA,CAAA3G,OAAA,EAAAyG,SAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAA9E,YAAA,CAAA2E,SAAA;EAqLb,SAAAA,UAAYI,MAAD,EAAe;IAAA,IAAAC,KAAA;IAAA,IAAAC,gBAAA,CAAA/G,OAAA,QAAAyG,SAAA;IACxBK,KAAA,GAAAF,MAAA,CAAAhG,IAAA,OAAMiG,MAAN;IADwBG,eAAA,KAAAC,uBAAA,CAAAjH,OAAA,EAAA8G,KAAA,mBAkBF,UAAAnH,CAAD,EAA0B;MAC/C,IAAAuH,qBAAA,GAA0BvH,CAAC,CAACwH,WAAF,CAAc5C,MAAxC;QAAQa,MAAF,GAAA8B,qBAAA,CAAE9B,MAAF;QAAUe,KAAA,GAAAe,qBAAA,CAAAf,KAAA;MAEhB,IAAM5B,MAAM,GAAG;QAAE4B,KAAF,EAAEA,KAAF;QAASf,MAAA,EAAAA;MAAT,CAAf;MAEA0B,KAAA,CAAKM,QAAL,CAAc,UAACC,KAAD,EAAQC,KAAR,EAAkB;QAC9B,IAAIlC,MAAM,KAAKiC,KAAK,CAAC9C,MAAN,CAAaa,MAAxB,IAAkCe,KAAK,KAAKkB,KAAK,CAAC9C,MAAN,CAAa4B,KAA7D,EAAoE;UAClE,OAAO,IAAP;QACD;QAED,OAAO;UACL5B,MADK,EACLA,MADK;UAELgD,aAAa,EAAEnD,gBAAgB,CAC7BiD,KAAK,CAAC9D,MADuB,EAE7B+D,KAAK,CAACjD,MAFuB,EAG7BiD,KAAK,CAAChD,mBAHuB,EAI7BgD,KAAK,CAACtD,aAJuB,EAK7BO,MAL6B,EAM7B8C,KAAK,CAACE,aANuB;QAF1B,CAAP;MAWD,CAhBD;IAiBD,CAxCyB;IAAAP,eAAA,KAAAC,uBAAA,CAAAjH,OAAA,EAAA8G,KAAA,yBA0CG,UAAAU,KAAA,EAMvB;MAAA,IALJnC,KAD4B,GAAAmC,KAAA,CAC5BnC,KAD4B;QAE5BD,MAAA,GAAAoC,KAAA,CAAApC,MAAA;MAKA0B,KAAA,CAAKM,QAAL,CAAc,UAAAK,KAAA,EAAuB;QAAA,IAApBF,aAAA,GAAAE,KAAA,CAAAF,aAAA;QACf,IAAMG,cAAc,GAAGH,aAAa,CAAClC,KAAK,CAACC,GAAP,CAApC;QAEA,IAAIoC,cAAc,KAAKtC,MAAvB,EAA+B;UAC7B,OAAO,IAAP;QACD;QAED,OAAO;UACLmC,aAAa,EAAAhG,aAAA,CAAAA,aAAA,KACRgG,aADU,WAAA5F,gBAAA,CAAA3B,OAAA,MAEZqF,KAAK,CAACC,GAAP,EAAaF,MAAA;QAHV,CAAP;MAMD,CAbD;IAcD,CA/DyB;IAAA4B,eAAA,KAAAC,uBAAA,CAAAjH,OAAA,EAAA8G,KAAA,sBAiEA,YAAM;MAC9B,IAAQO,KAAA,GAAUP,KAAA,CAAKQ,KAAvB,CAAQD,KAAA;MAER,OAAOA,KAAK,CAACM,MAAN,CAAaN,KAAK,CAAC7D,KAAnB,CAAP;IACD,CArEyB;IAAAwD,eAAA,KAAAC,uBAAA,CAAAjH,OAAA,EAAA8G,KAAA,uBAuEC,UAAAc,KAAA,EAAyC;MAAA,IAAtCvC,KAAA,GAAAuC,KAAA,CAAAvC,KAAA;MAC5B,IAAQwC,gBAAA,GAAqBf,KAAA,CAAKQ,KAAlC,CAAQO,gBAAA;MACR,IAAQtE,MAAA,GAAWuD,KAAA,CAAKO,KAAxB,CAAQ9D,MAAA;MAER,IAAMuE,aAAa,GAAGD,gBAAgB,CAAC;QAAExC,KAAA,EAAAA;MAAF,CAAD,CAAtC;MAEA,IAAIyC,aAAJ,EAAmB;QACjB,IAAMC,aAAa,GAAGxE,MAAM,CAACyE,IAAP,CACnB,UAAAjE,KAAD;UAAA,OAAWA,KAAK,CAACL,UAAN,CAAiB2B,KAAjB,CAAuBC,GAAvB,KAA+BwC,aAAa,CAACxC,GADpC;QAAA,EAAtB;QAIA,OAAOyC,aAAP;MACD;MAED,OAAOE,SAAP;IACD,CAtFyB;IAGxBnB,KAAA,CAAKO,KAAL,GAAa;MACXM,MAAM,EAAE,EADG;MAEXpE,MAAM,EAAE,EAFG;MAGX2E,QAAQ,EAAE,EAHC;MAIX3D,MAAM,EAAE4D,gCAAsB,CAACC,cAAvB,CAAsCC,KAJnC;MAKXC,WAAW,EAAExB,KAAA,CAAKQ,KAAL,CAAWgB,WALb;MAWXf,aAAa,EAAE;IAXJ,CAAb;IAAA,OAAAT,KAAA;EAaD;EAAA,IAAAyB,aAAA,CAAAvI,OAAA,EAAAyG,SAAA;IAAAnB,GAAA;IAAAkD,KAAA,EAwED,SAAAC,OAAA,EAAS;MAAA,IAAAC,MAAA;MACP,IAAAC,WAAA,GAmBI,KAAKrB,KAnBT;QACEjD,MADI,GAAAsE,WAAA,CACJtE,MADI;QAEJgD,KAFI,GAAAsB,WAAA,CAEJtB,KAFI;QAGJM,MAHI,GAAAgB,WAAA,CAGJhB,MAHI;QAIJiB,gBAJI,GAAAD,WAAA,CAIJC,gBAJI;QAKJC,WALI,GAAAF,WAAA,CAKJE,WALI;QAMJC,YANI,GAAAH,WAAA,CAMJG,YANI;QAOJC,YAPI,GAAAJ,WAAA,CAOJI,YAPI;QAQJC,WARI,GAAAL,WAAA,CAQJK,WARI;QASJ1E,mBATI,GAAAqE,WAAA,CASJrE,mBATI;QAUJN,aAVI,GAAA2E,WAAA,CAUJ3E,aAVI;QAWJiF,iBAXI,GAAAN,WAAA,CAWJM,iBAXI;QAYJC,eAZI,GAAAP,WAAA,CAYJO,eAZI;QAaJC,cAbI,GAAAR,WAAA,CAaJQ,cAbI;QAcJC,YAdI,GAAAT,WAAA,CAcJS,YAdI;QAeJC,eAfI,GAAAV,WAAA,CAeJU,eAfI;QAAAC,qBAAA,GAAAX,WAAA,CAgBJY,qBAAqB;QAArBA,qBAAqB,GAAAD,qBAAA,cAAGE,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IACtBD,qBAAQ,CAACC,EAAT,KAAgB,SADM,IAEtBD,qBAAQ,CAACC,EAAT,KAAgB,QAAAH,qBAAA;MAGpB,IAAAI,WAAA,GAAoD,KAAKrC,KAAzD;QAAQ9D,MAAF,GAAAmG,WAAA,CAAEnG,MAAF;QAAUgB,MAAV,GAAAmF,WAAA,CAAUnF,MAAV;QAAkB2D,QAAlB,GAAAwB,WAAA,CAAkBxB,QAAlB;QAA4BX,aAAA,GAAAmC,WAAA,CAAAnC,aAAA;MAElC,IAAMoC,YAAY,GAAGtC,KAAK,CAACM,MAAN,CAAaN,KAAK,CAAC7D,KAAnB,CAArB;MACA,IAAMoG,mBAAmB,GAAGrC,aAAa,CAACoC,YAAY,CAACrE,GAAd,CAAzC;MAEA,IAAMuE,qBAAqB,GAAG,KAAKxC,KAAL,CAAW9D,MAAX,CAAkBuG,KAAlB,CAAwB,CAAC,CAAzB,EAA4BC,IAA5B,CAAkC,UAAAhG,KAAD,EAAW;QAAA,IAAAiG,qBAAA;QACxE,IAAM3G,OAAO,IAAA2G,qBAAA,GAAGjG,KAAK,CAACL,UAAN,CAAiBL,OAApB,cAAA2G,qBAAA,cAAAA,qBAAA,GAA+B,EAA5C;QACA,IAAQC,UAAF,GAAwD5G,OAA9D,CAAQ4G,UAAF;UAAcC,iBAAd,GAAwD7G,OAA9D,CAAoB6G,iBAAd;UAAAC,oBAAA,GAAwD9G,OAA9D,CAAuC+G,WAAW;UAAXA,WAAW,GAAAD,oBAAA,cAAG,OAAAA,oBAAA;QAErD,IACED,iBAAiB,IACjBE,WAAW,KAAK,KADhB,IAEAH,UAAU,KAAK,QAHjB,EAIE;UACA,OAAO,IAAP;QACD;QAED,OAAO,KAAP;MACD,CAb6B,CAA9B;MAeA,IAAII,kBAAkB,GAAG,CAAzB;MAEA,KAAK,IAAIxJ,CAAC,GAAG0C,MAAM,CAAC9B,MAAP,GAAgB,CAA7B,EAAgCZ,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;QAC3C,IAAQwC,OAAA,GAAYE,MAAM,CAAC1C,CAAD,CAAN,CAAU6C,UAA9B,CAAQL,OAAA;QACR,IAAAiH,qBAAA,GAUIjH,OAVJ,CAEEkH,oBAAoB;UAApBA,oBAAoB,GAAAD,qBAAA,cAAGjH,OAAO,CAACqC,YAAR,KAAyB,kBAAzB,GACnB,KADmB,GAEnB,IAAAxB,4BAAsB,EAACb,OAAO,CAACI,qBAAT,CAAtB,GACA5C,CAAC,KACD0C,MAAM,CACHiH,GADH,CACQ,UAAAzG,KAAD;YAAA,OAAWA,KAAK,CAACL,UAAN,CAAiBL,OAAjB,CAAyBI,qBAD3C;UAAA,GAEGgH,WAFH,CAEeC,+CAFf,CAFA,GAKA,OAAAJ,qBAAA;QAGN,IAAIC,oBAAoB,KAAK,KAA7B,EAAoC;UAClCF,kBAAkB;QACnB,CAFD,MAEO;UACL;QACD;MACF;MAED,IAAMM,cAAc,GAClB1L,KAAA,CAAA2L,aAAA,CAAC3L,KAAD,CAAO4L,QAAP;QAAgBvF,GAAG,EAAC;MAApB,GACGyD,YAAY,CAAC;QACZ+B,IAAI,EAAE,OADM;QAEZvG,MAFY,EAEZA,MAFY;QAGZhB,MAHY,EAGZA,MAHY;QAIZwH,gBAAgB,EAAE,KAAKA,gBAJX;QAKZC,eAAe,EAAE,KAAKA,eALV;QAMZC,qBAAqB,EAAE,KAAKC,kBANhB;QAOZjG,KAAK,EAAE,CACLkG,MAAM,CAACC,QADF,EAELvB,qBAAqB,IAAI,CAEvB;UAAEzE,MAAM,EAAEwE;QAAV,CAFuB,EAGvBuB,MAAM,CAACE,QAHgB,CAFpB;MAPK,CAAD,CADf,CADF;MAqBA,OACEpM,KAAA,CAAA2L,aAAA,CAACU,oBAAD,QACGzB,qBAAqB,GAAG,IAAH,GAAUc,cADlC,EAEE1L,KAAA,CAAA2L,aAAA,CAACW,6BAAD;QACEC,OAAO,EAAEjC,qBADX;QAEEtE,KAAK,EAAEkG,MAAM,CAACM,SAFhB;QAGEC,QAAQ,EAAE,KAAKC;MAHjB,GAKGhE,MAAM,CAAC6C,GAAP,CAAW,UAACnF,KAAD,EAAQ7B,KAAR,EAAeoI,IAAf,EAAwB;QAAA,IAAAC,OAAA,EAAAC,QAAA;QAClC,IAAMC,OAAO,GAAGpC,YAAY,CAACrE,GAAb,KAAqBD,KAAK,CAACC,GAA3C;QACA,IAAMW,OAAO,GAAGiC,QAAQ,CAAC7C,KAAK,CAACC,GAAP,CAAxB;QACA,IAAMvB,KAAK,GAAGR,MAAM,CAACC,KAAD,CAApB;QAMA,IAAIwI,cAA0D,GAAG,CAAjE;QAEA,IAAIxI,KAAK,GAAGoI,IAAI,CAACnK,MAAL,GAAc4I,kBAAd,GAAmC,CAA/C,EAAkD;UAEhD2B,cAAc,GAAGhJ,cAAjB;QACD,CAHD,MAGO;UACL,IAAMiJ,gBAAgB,GAAG1I,MAAM,CAACqI,IAAI,CAACnK,MAAL,GAAc,CAAf,CAA/B;UACA,IAAMyK,WAAW,GACf1I,KAAK,KAAKoI,IAAI,CAACnK,MAAL,GAAc,CAAxB,GACIyB,YADJ,GAEIM,KAAK,IAAIoI,IAAI,CAACnK,MAAL,GAAc4I,kBAAvB,GACApH,gCADA,GAEAD,cALN;UAMAgJ,cAAc,GAAGC,gBAAgB,GAC7BA,gBAAgB,CAACE,QAAjB,CAA0BC,OAA1B,CAAkC9F,WAAlC,CAA8C;YAC5CC,UAAU,EAAE,CAAC,CAAD,EAAI,IAAIxD,OAAR,EAAiB,CAAjB,CADgC;YAE5CyD,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO0F,WAAP,CAF+B;YAG5CG,WAAW,EAAE;UAH+B,CAA9C,CAD6B,GAM7BpJ,gCANJ;QAOD;QAED,IAAAqJ,sBAAA,GAKIvI,KAAK,CAACL,UAAN,CAAiBL,OALrB;UAAAkJ,sBAAA,GAAAD,sBAAA,CACElC,WAAW;UAAXA,WAAW,GAAAmC,sBAAA,cAAG,IADV,GAAAA,sBAAA;UAEJrC,iBAFI,GAAAoC,sBAAA,CAEJpC,iBAFI;UAGJlF,WAHI,GAAAsH,sBAAA,CAGJtH,WAHI;UAIJwH,eAAA,GAAAF,sBAAA,CAAAE,eAAA;QAGF,IAAMC,gBAAgB,GAAGpI,MAAM,CAACU,GAAhC;QACA,IAAM2H,kBAAkB,GAAGrI,MAAM,CAACsI,KAAlC;QACA,IAAMC,mBAAmB,GAAGvI,MAAM,CAACwI,MAAnC;QACA,IAAMC,iBAAiB,GAAGzI,MAAM,CAAC0I,IAAjC;QAEA,IAAMC,YAAY,GAChB5C,WAAW,KAAK,KAAhB,GAAwB7C,aAAa,CAAClC,KAAK,CAACC,GAAP,CAArC,GAAmD,CADrD;QAGA,IAAA2H,KAAA,GACE/H,uBAAU,CAACC,OAAX,CAAmBH,WAAnB,KAAmC,EADrC;UAAyBkI,qBAAA,GAAAD,KAAA,CAAjBE,eAAe;QAGvB,IAAIC,iBAAJ;QAEA,IAAIhD,WAAJ,EAAiB;UACf,IAAI,OAAOoC,eAAP,KAA2B,QAA/B,EAAyC;YACvCY,iBAAiB,GAAG,IAAAC,cAAK,EAACb,eAAD,CAAL,CAAuBc,MAAvB,EAApB;UACD,CAFD,MAEO,IAAI,OAAOJ,qBAAP,KAAiC,QAArC,EAA+C;YACpDE,iBAAiB,GAAG,CAAC,IAAAC,cAAK,EAACH,qBAAD,CAAL,CAA6BI,MAA7B,EAArB;UACD;QACF;QAGD,IAAM3J,kBAAkB,GAAGL,qBAAqB,CAACC,MAAD,EAASC,KAAT,CAAhD;QACA,IAAMW,OAAO,GAAGL,UAAU,CACxBC,KADwB,EAExBJ,kBAFwB,EAGxBK,aAHwB,CAA1B;QAMA,IAAMuJ,uBAAuB,GAC3B,EAAA1B,OAAA,GAAAtI,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,cAAAqI,OAAA,uBAAAA,OAAA,CAAmBnI,UAAnB,CAA8BL,OAA9B,CAAsCqC,YAAtC,MACA,kBAFF;QAIA,IAAM8H,mBAAmB,GACvB,EAAA1B,QAAA,GAAAvI,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,cAAAsI,QAAA,uBAAAA,QAAA,CAAmBpI,UAAnB,CAA8BL,OAA9B,CAAsCkH,oBAAtC,MACA,KAFF;QAIA,OACEtL,KAAA,CAAA2L,aAAA,CAAC6C,oBAAD;UACEnI,GAAG,EAAED,KAAK,CAACC,GADb;UAEEL,KAAK,EAAEC,uBAAU,CAACwI,YAFpB;UAGElC,OAAO,EAAEjC,qBAHX;UAIEoE,MAAM,EAAE3B,cAJV;UAKE4B,aAAa,EAAC;QALhB,GAOE3O,KAAA,CAAA2L,aAAA,CAACiD,sBAAD;UACErK,KAAK,EAAEA,KADT;UAEEG,kBAAkB,EAAEA,kBAFtB;UAGEmK,KAAK,EAAE3J,OAHT;UAIEwJ,MAAM,EAAEnK,KAAK,KAAKoI,IAAI,CAACnK,MAAL,GAAc,CAJlC;UAKEsK,OAAO,EAAEA,OALX;UAMEgC,OAAO,EAAEnF,gBAAgB,CAACoF,QAAjB,CAA0B3I,KAAK,CAACC,GAAhC,CANX;UAOEf,MAAM,EAAEA,MAPV;UAQE0B,OAAO,EAAEA,OARX;UASElC,KAAK,EAAEA,KATT;UAUE0I,gBAAgB,EAAEA,gBAVpB;UAWEC,kBAAkB,EAAEA,kBAXtB;UAYEE,mBAAmB,EAAEA,mBAZvB;UAaEE,iBAAiB,EAAEA,iBAbrB;UAcE3D,cAAc,EAAEA,cAdlB;UAeEE,eAAe,EAAEA,eAfnB;UAgBED,YAAY,EAAEA,YAhBhB;UAiBE4D,YAAY,EAAEA,YAjBhB;UAkBE1I,mBAAmB,EAAEA,mBAlBvB;UAmBE2J,oBAAoB,EAAEvF,MAAA,CAAKwC,kBAnB7B;UAoBEH,gBAAgB,EAAErC,MAAA,CAAKqC,gBApBzB;UAqBEC,eAAe,EAAEtC,MAAA,CAAKsC,eArBxB;UAsBEoC,iBAAiB,EAAEA,iBAtBrB;UAuBEc,sBAAsB,EACpBrE,qBAAqB,IAAI,CAACK,iBAxB9B;UA0BEnB,YAAY,EAAEA,YA1BhB;UA2BEC,WAAW,EAAEA,WA3Bf;UA4BEH,WAAW,EAAEA,WA5Bf;UA6BEC,YAAY,EAAEA,YA7BhB;UA8BEG,iBAAiB,EAAEA,iBA9BrB;UA+BEC,eAAe,EAAEA,eA/BnB;UAgCEqE,uBAAuB,EAAEA,uBAhC3B;UAiCEC,mBAAmB,EAAEA;QAjCvB,EAPF,CADF;MA6CD,CAxHA,CALH,CAFF,EAiIG3D,qBAAqB,GAAGc,cAAH,GAAoB,IAjI5C,CADF;IAqID;EAAA;IAAArF,GAAA;IAAAkD,KAAA,EAve8B,SAAA2F,yBAC7B7G,KAD6B,EAE7BD,KAF6B,EAGN;MACvB,IACEC,KAAK,CAACK,MAAN,KAAiBN,KAAK,CAACM,MAAvB,IACAL,KAAK,CAACgB,WAAN,KAAsBjB,KAAK,CAACiB,WAF9B,EAGE;QACA,OAAO,IAAP;MACD;MAED,IAAMJ,QAAQ,GAAGZ,KAAK,CAACK,MAAN,CAAalD,MAAb,CAAmC,UAACC,GAAD,EAAMC,IAAN,EAAe;QACjE,IAAMjB,UAAU,GAAG4D,KAAK,CAACgB,WAAN,CAAkB3D,IAAI,CAACW,GAAvB,CAAnB;QACA,IAAA8I,KAAA,GAA6B,CAAA1K,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEL,OAAZ,KAAuB,EAApD;UAAQgL,gBAAA,GAAAD,KAAA,CAAAC,gBAAA;QAER3J,GAAG,CAACC,IAAI,CAACW,GAAN,CAAH,GACE+B,KAAK,CAACa,QAAN,CAAevD,IAAI,CAACW,GAApB,KACA,IAAIgJ,qBAAQ,CAACC,KAAb,CACEjH,KAAK,CAACkH,gBAAN,CAAuBR,QAAvB,CAAgCrJ,IAAI,CAACW,GAArC,KACA+I,gBAAgB,KAAK,KADrB,GAEI7I,sBAAsB,CAAC6B,KAAK,CAAC9C,MAAP,EAAeb,UAAf,CAF1B,GAGI,CAJN,CAFF;QASA,OAAOgB,GAAP;MACD,CAdgB,EAcd,EAdc,CAAjB;MAgBA,IAAMnB,MAAM,GAAG+D,KAAK,CAACK,MAAN,CAAa6C,GAAb,CAAiB,UAACnF,KAAD,EAAQ7B,KAAR,EAAeoI,IAAf,EAAwB;QAAA,IAAA6C,qBAAA;QACtD,IAAM3G,aAAa,GAAG8D,IAAI,CAACpI,KAAK,GAAG,CAAT,CAA1B;QACA,IAAMkL,SAAS,GAAG9C,IAAI,CAACpI,KAAK,GAAG,CAAT,CAAtB;QAEA,IAAMmL,QAAQ,GAAGtH,KAAK,CAAC9D,MAAN,CAAaC,KAAb,CAAjB;QAEA,IAAMoL,cAAc,GAAG1G,QAAQ,CAAC7C,KAAK,CAACC,GAAP,CAA/B;QACA,IAAMuJ,eAAe,GAAG/G,aAAa,GACjCI,QAAQ,CAACJ,aAAa,CAACxC,GAAf,CADyB,GAEjC2C,SAFJ;QAGA,IAAM6G,WAAW,GAAGJ,SAAS,GAAGxG,QAAQ,CAACwG,SAAS,CAACpJ,GAAX,CAAX,GAA6B2C,SAA1D;QAEA,IAAMvE,UAAU,GACd4D,KAAK,CAACgB,WAAN,CAAkBjD,KAAK,CAACC,GAAxB,KACA+B,KAAK,CAACiB,WAAN,CAAkBjD,KAAK,CAACC,GAAxB,CADA,KAECqJ,QAAQ,GAAGA,QAAQ,CAACjL,UAAZ,GAAyBP,mBAFlC,CADF;QAKA,IAAM4L,cAAc,GAClBzH,KAAK,CAACgB,WAAN,CAAkBoG,SAAlB,aAAkBA,SAAlB,uBAAkBA,SAAS,CAAEpJ,GAA7B,KAAqC+B,KAAK,CAACiB,WAAN,CAAkBoG,SAAlB,aAAkBA,SAAlB,uBAAkBA,SAAS,CAAEpJ,GAA7B,CADvC;QAGA,IAAM0J,kBAAkB,GACtB1H,KAAK,CAACgB,WAAN,CAAkBR,aAAlB,aAAkBA,aAAlB,uBAAkBA,aAAa,CAAExC,GAAjC,KACA+B,KAAK,CAACiB,WAAN,CAAkBR,aAAlB,aAAkBA,aAAlB,uBAAkBA,aAAa,CAAExC,GAAjC,CAFF;QAUA,IAAM2J,0BAA0B,GAC9BzL,KAAK,KAAKoI,IAAI,CAACnK,MAAL,GAAc,CAAxB,IACAsN,cADA,IAEAA,cAAc,CAAC1L,OAAf,CAAuBqC,YAAvB,KAAwC,kBAFxC,GAGIqJ,cAAc,CAAC1L,OAHnB,GAIIK,UAAU,CAACL,OALjB;QAOA,IAAI6L,uBAAuB,GACzBD,0BAA0B,CAACvJ,YAA3B,KAA4C,OAA5C,GACIG,kCADJ,GAEIoJ,0BAA0B,CAACvJ,YAA3B,KAA4C,kBAA5C,GACAyJ,sCADA,GAEArJ,oCALN;QAOA,IAAAsJ,qBAAA,GAcIH,0BAdJ,CACEZ,gBAAgB;UAAhBA,gBAAgB,GAAAe,qBAAA,cAAG5F,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IACjBD,qBAAQ,CAACC,EAAT,KAAgB,SADC,IAEjBD,qBAAQ,CAACC,EAAT,KAAgB,OAHd,GAAA2F,qBAAA;UAAAC,sBAAA,GAcFJ,0BAdJ,CAIEK,cAAc;UAAdA,cAAc,GAAAD,sBAAA,cAAG7F,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB4E,gBAJtC,GAAAgB,sBAAA;UAAAE,sBAAA,GAcFN,0BAdJ,CAKErJ,gBAAgB;UAAhBA,gBAAgB,GAAA2J,sBAAA,cAAGL,uBAAuB,CAACtJ,gBALvC,GAAA2J,sBAAA;UAAAC,sBAAA,GAcFP,0BAdJ,CAMEQ,cAAc;UAAdA,cAAc,GAAAD,sBAAA,cAAGN,uBAAuB,CAACO,cANrC,GAAAD,sBAAA;UAAAE,sBAAA,GAcFT,0BAdJ,CAOExL,qBAAqB;UAArBA,qBAAqB,GAAAiM,sBAAA,cAAGrB,gBAAgB,KAAK,KAArB,GACpBsB,sCADoB,GAEpBT,uBAAuB,CAACzL,qBATxB,GAAAiM,sBAAA;UAAAE,sBAAA,GAcFX,0BAdJ,CAUEY,uBAAuB;UAAvBA,uBAAuB,GAAAD,sBAAA,cAAGV,uBAAuB,CAACW,uBAV9C,GAAAD,sBAAA;UAAAE,sBAAA,GAcFb,0BAdJ,CAWEc,kBAAkB;UAAlBA,kBAAkB,GAAAD,sBAAA,cAAItG,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IACpBwF,0BAA0B,CAACvJ,YAA3B,KAA4C,kBADzB,IAEnB,IAAAxB,4BAAsB,EAACT,qBAAD,IAAAqM,sBAAA;QAG1B,IAAM7F,UAA2B,IAAAwE,qBAAA,GAC/B/K,UAAU,CAACL,OAAX,CAAmB4G,UADY,cAAAwE,qBAAA,cAAAA,qBAAA,GAE9B,EACCQ,0BAA0B,CAACvJ,YAA3B,KAA4C,OAA5C,IACAuJ,0BAA0B,CAACvJ,YAA3B,KAA4C,kBAD5C,IAEA,CAAAqJ,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAE1L,OAAhB,CAAwBqC,YAAxB,MAAyC,OAFzC,IAGA,CAAAqJ,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAE1L,OAAhB,CAAwBqC,YAAxB,MAAyC,kBAHzC,IAIA,IAAAxB,4BAAsB,EAACT,qBAAD,CALvB,KAOD+F,qBAAQ,CAACC,EAAT,KAAgB,KAPf,IAQD/F,UAAU,CAACL,OAAX,CAAmB2M,MAAnB,KAA8B/H,SAR7B,GASG,OATH,GAUG,QAZN;QAcA,IAAMlE,KAAK,GAAG;UACZsB,KADY,EACZA,KADY;UAEZ3B,UAAU,EAAAnC,aAAA,CAAAA,aAAA,KACLmC,UADO;YAEVL,OAAO,EAAA9B,aAAA,CAAAA,aAAA,KACFmC,UAAU,CAACL,OADP;cAEPgL,gBAFO,EAEPA,gBAFO;cAGP0B,kBAHO,EAGPA,kBAHO;cAIPtM,qBAJO,EAIPA,qBAJO;cAKPmC,gBALO,EAKPA,gBALO;cAMP0J,cANO,EAMPA,cANO;cAOPO,uBAPO,EAOPA,uBAPO;cAQPJ,cARO,EAQPA,cARO;cASPxF,UAAA,EAAAA;YAAA;UATO,EAJC;UAgBZkC,QAAQ,EAAE;YACRC,OAAO,EAAEpG,sBAAsB,CAC7B4I,cAD6B,EAE7BvH,KAAK,CAAC9C,MAFuB,EAG7Bb,UAH6B,CADvB;YAMRuM,IAAI,EACFnB,WAAW,IACX,CAAAC,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAE1L,OAAhB,CAAwBqC,YAAxB,MAAyC,kBADzC,GAEIM,sBAAsB,CACpB8I,WADoB,EAEpBzH,KAAK,CAAC9C,MAFc,EAGpBwK,cAHoB,CAF1B,GAOI9G,SAdE;YAeRzD,QAAQ,EAAEqK,eAAe,GACrB7I,sBAAsB,CACpB6I,eADoB,EAEpBxH,KAAK,CAAC9C,MAFc,EAGpByK,kBAHoB,CADD,GAMrB/G;UArBI,CAhBE;UAuCZiI,MAAM,EAAE,CACN7I,KAAK,CAAC9C,MADA,EAENb,UAFM,EAGNqL,cAHM,EAINC,kBAJM,EAKNJ,cALM,EAMNE,WANM,EAOND,eAPM;QAvCI,CAAd;QAkDA,IACEF,QAAQ,IACR5K,KAAK,CAACmM,MAAN,CAAaC,KAAb,CAAmB,UAACC,EAAD,EAAKvP,CAAL,EAAW;UAE5B,OAAO8N,QAAQ,CAACuB,MAAT,CAAgBrP,CAAhB,MAAuBuP,EAA9B;QACD,CAHD,CAFF,EAME;UACA,OAAOzB,QAAP;QACD;QAED,OAAO5K,KAAP;MACD,CAvIc,CAAf;MAyIA,OAAO;QACL4D,MAAM,EAAEL,KAAK,CAACK,MADT;QAELpE,MAFK,EAELA,MAFK;QAGL2E,QAHK,EAGLA,QAHK;QAILI,WAAW,EAAEhB,KAAK,CAACgB,WAJd;QAKLf,aAAa,EAAEnD,gBAAgB,CAC7Bb,MAD6B,EAE7B+D,KAAK,CAACjD,MAFuB,EAG7BiD,KAAK,CAAChD,mBAHuB,EAI7BgD,KAAK,CAACtD,aAJuB,EAK7BqD,KAAK,CAAC9C,MALuB,EAM7B8C,KAAK,CAACE,aANuB;MAL1B,CAAP;IAcD;EAAA;EAAA,OAAAd,SAAA;AAAA,EAnLoCxH,KAAK,CAACoR,SAA9B;AAAAC,OAAA,CAAAtQ,OAAA,GAAAyG,SAAA;AA2ef,IAAM0E,MAAM,GAAGjG,uBAAU,CAACqL,MAAX,CAAkB;EAC/B9E,SAAS,EAAE;IACT+E,IAAI,EAAE;EADG,CADoB;EAI/BnF,QAAQ,EAAE;IACRoF,QAAQ,EAAE,UADF;IAER1L,GAAG,EAAE,CAFG;IAGRgI,IAAI,EAAE,CAHE;IAIRJ,KAAK,EAAE;EAJC,CAJqB;EAU/BvB,QAAQ,EAAE;IACRsF,MAAM,EAAE;EADA;AAVqB,CAAlB,CAAf"},"metadata":{},"sourceType":"script","externalDependencies":[]}