{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar _reactNative = require(\"react-native\");\nvar _gestureHandlers = require(\"../handlers/gestureHandlers\");\nvar _State = require(\"../State\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) { if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } } return n.default = e, t && t.set(e, n), n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty3.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nvar DrawerLayout = function (_Component) {\n  (0, _inherits2.default)(DrawerLayout, _Component);\n  var _super = _createSuper(DrawerLayout);\n  function DrawerLayout(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, DrawerLayout);\n    _this = _super.call(this, _props);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openValue\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureEvent\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"accessibilityIsModalView\", React.createRef());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pointerEventsView\", React.createRef());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"panGestureHandler\", React.createRef());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerShown\", false);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n        drawerWidth = props.drawerWidth,\n        drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n        touchXValue = state.touchX,\n        drawerTranslation = state.drawerTranslation,\n        containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);\n        touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n      _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var _this$props$onDrawerS, _this$props;\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = _this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n      _this.onGestureEvent = _reactNative.Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"emitStateChanged\", function (newState, drawerWillShow) {\n      var _this$props$onDrawerS2, _this$props2;\n      (_this$props$onDrawerS2 = (_this$props2 = _this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleRelease\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props6 = _this.props,\n        drawerWidth = _this$props6.drawerWidth,\n        drawerPosition = _this$props6.drawerPosition,\n        drawerType = _this$props6.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n        velocityX = nativeEvent.velocityX,\n        touchX = nativeEvent.x;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateShowing\", function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props7 = _this.props,\n        drawerPosition = _this$props7.drawerPosition,\n        minSwipeDistance = _this$props7.minSwipeDistance,\n        edgeWidth = _this$props7.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"animateDrawer\", function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      _this.updateShowing(willShow);\n      _this.emitStateChanged(SETTLING, willShow);\n      if (_this.props.hideStatusBar) {\n        _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n      _reactNative.Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n            (_this$props$onDrawerO = (_this$props3 = _this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n            (_this$props$onDrawerC = (_this$props4 = _this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderOverlay\", function () {\n      (0, _invariant.default)(_this.openValue, 'should be set');\n      var overlayOpacity = _this.openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(_gestureHandlers.TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange\n      }, React.createElement(_reactNative.Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderDrawer\", function () {\n      var _this$props8 = _this.props,\n        drawerBackgroundColor = _this$props8.drawerBackgroundColor,\n        drawerWidth = _this$props8.drawerWidth,\n        drawerPosition = _this$props8.drawerPosition,\n        drawerType = _this$props8.drawerType,\n        drawerContainerStyle = _this$props8.drawerContainerStyle,\n        contentContainerStyle = _this$props8.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      (0, _invariant.default)(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(_reactNative.Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout\n      }, React.createElement(_reactNative.Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(_reactNative.Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, React.createElement(_reactNative.View, {\n        style: dynamicDrawerStyles\n      }, _this.props.renderNavigationView(_this.openValue))));\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"setPanGestureRef\", function (ref) {\n      var _this$props$onGesture, _this$props5;\n      _this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = _this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n    var _dragX = new _reactNative.Animated.Value(0);\n    var _touchX = new _reactNative.Animated.Value(0);\n    var _drawerTranslation = new _reactNative.Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    return _this;\n  }\n  (0, _createClass2.default)(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n        drawerPosition = _this$props9.drawerPosition,\n        drawerLockMode = _this$props9.drawerLockMode,\n        edgeWidth = _this$props9.edgeWidth,\n        minSwipeDistance = _this$props9.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(_gestureHandlers.PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }]);\n  return DrawerLayout;\n}(React.Component);\nexports.default = DrawerLayout;\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\nvar styles = _reactNative.StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_invariant","_interopRequireDefault","_reactNative","_gestureHandlers","_State","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ownKeys","keys","getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty3","getOwnPropertyDescriptors","defineProperties","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","_Component","_inherits2","_super","_props","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","createRef","props","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","_this$props$onDrawerS","_this$props","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","_ref","setState","layout","width","newState","drawerWillShow","_this$props$onDrawerS2","_this$props2","onDrawerStateChanged","_ref2","oldState","State","ACTIVE","handleRelease","emitStateChanged","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_ref3","drawerShown","drawerLockMode","closeDrawer","_ref4","_this$props6","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","_this$props7","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","_ref5","finished","_this$props$onDrawerO","_this$props3","onDrawerOpen","_this$props$onDrawerC","_this$props4","onDrawerClose","options","forceUpdate","invariant","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","_this$props8","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","_this$props$onGesture","_this$props5","onGestureRef","_dragX","_touchX","_drawerTranslation","updateAnimatedEvent","_createClass2","key","value","UNSAFE_componentWillUpdate","render","_this$props9","PanGestureHandler","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Component","exports","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["C:\\Users\\DELL\\Downloads\\ltmobile\\ltmobile\\muvi-master\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  TapGestureHandler,\n  HandlerStateChangeEvent,\n  TapGestureHandlerEventPayload,\n} from '../handlers/gestureHandlers';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n  drawerPosition?: DrawerPosition;\n  drawerWidth?: number;\n  drawerBackgroundColor?: string;\n  drawerLockMode?: DrawerLockMode;\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n  edgeWidth?: number;\n  minSwipeDistance?: number;\n  hideStatusBar?: boolean;\n  statusBarAnimation?: StatusBarAnimation;\n  overlayColor?: string;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n  enableTrackpadTwoFingerGesture?: boolean;\n  onDrawerSlide?: (position: number) => void;\n  onGestureRef?: (ref: PanGestureHandler) => void;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    const overlayOpacity = this.openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK\n    // taken from https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (this\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}