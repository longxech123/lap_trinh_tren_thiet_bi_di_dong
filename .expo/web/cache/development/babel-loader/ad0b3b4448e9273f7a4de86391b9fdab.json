{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationBuilder;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\nvar _Group = _interopRequireDefault(require(\"./Group\"));\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\nvar _Screen = _interopRequireDefault(require(\"./Screen\"));\nvar _types = require(\"./types\");\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\nvar _useComponent = _interopRequireDefault(require(\"./useComponent\"));\nvar _useCurrentRender = _interopRequireDefault(require(\"./useCurrentRender\"));\nvar _useDescriptors = _interopRequireDefault(require(\"./useDescriptors\"));\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\nvar _useFocusedListenersChildrenAdapter = _interopRequireDefault(require(\"./useFocusedListenersChildrenAdapter\"));\nvar _useFocusEvents = _interopRequireDefault(require(\"./useFocusEvents\"));\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\nvar _useNavigationHelpers = _interopRequireDefault(require(\"./useNavigationHelpers\"));\nvar _useOnAction = _interopRequireDefault(require(\"./useOnAction\"));\nvar _useOnGetState = _interopRequireDefault(require(\"./useOnGetState\"));\nvar _useOnRouteFocus = _interopRequireDefault(require(\"./useOnRouteFocus\"));\nvar _useRegisterNavigator = _interopRequireDefault(require(\"./useRegisterNavigator\"));\nvar _useScheduleUpdate = _interopRequireDefault(require(\"./useScheduleUpdate\"));\nvar _excluded = [\"children\", \"screenListeners\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n_types.PrivateValueStore;\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, options) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.default) {\n        acc.push([options, child.props]);\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === _Group.default) {\n        acc.push.apply(acc, (0, _toConsumableArray2.default)(getRouteConfigsFromChildren(child.props.children, child.type !== _Group.default ? options : options != null ? [].concat((0, _toConsumableArray2.default)(options), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$ = config[1],\n        name = _config$.name,\n        children = _config$.children,\n        component = _config$.component,\n        getComponent = _config$.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n        if (typeof component === 'function' && component.name === 'component') {\n          console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n  return configs;\n};\nfunction useNavigationBuilder(createRouter, options) {\n  var navigatorKey = (0, _useRegisterNavigator.default)();\n  var route = React.useContext(_NavigationRouteContext.default);\n  var children = options.children,\n    screenListeners = options.screenListeners,\n    rest = (0, _objectWithoutProperties2.default)(options, _excluded);\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config[1].name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config[1].name + \"')\");\n    }\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config[1].name;\n  });\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr][1].initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return (0, _extends3.default)(acc, (0, _defineProperty2.default)({}, curr, screens[curr][1].getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(_NavigationStateContext.default),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr][1].initialParams;\n        var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params$state, _route$params5;\n        return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!(0, _isArrayEqual.default)(state.routeNames, routeNames)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.default)(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = (0, _useEventEmitter.default)(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, (0, _toConsumableArray2.default)(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)([screenListeners].concat((0, _toConsumableArray2.default)(routeNames.map(function (name) {\n      var listeners = screens[name][1].listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  (0, _useFocusEvents.default)({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = (0, _useOnAction.default)({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = (0, _useOnRouteFocus.default)({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = (0, _useNavigationHelpers.default)({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  (0, _useFocusedListenersChildrenAdapter.default)({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.default)({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = (0, _useDescriptors.default)({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  (0, _useCurrentRender.default)({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = (0, _useComponent.default)(_NavigationHelpersContext.default.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"mappings":"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","names":["PrivateValueStore","getRouteConfigsFromChildren","children","options","configs","React","Children","toArray","reduce","acc","child","isValidElement","type","Screen","push","props","Fragment","Group","screenOptions","Error","_child$type","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","component","getComponent","undefined","isValidElementType","console","warn","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","routeGetIdList","Object","getId","length","isStateValid","useCallback","isStateInitialized","stale","NavigationStateContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","nextState","isArrayEqual","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","setTimeout","initializedStateRef","emitter","useEventEmitter","e","target","routes","find","key","_route","index","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","useFocusEvents","emit","data","useChildListeners","childListeners","addListener","useKeyedChildListeners","keyedListeners","addKeyedListener","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent","NavigationHelpersContext","Provider","value"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  options?: ScreenConfigWithParent<State, ScreenOptions, EventMap>[0]\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push([\n          options,\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        ]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.type !== Group\n              ? options\n              : options != null\n              ? [...options, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config[1];\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs =\n    getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config[1].name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config[1].name}')`\n      );\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config[1].name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr][1].getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name][1];\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}