{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getStateFromPath;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _extends4 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\nvar queryString = _interopRequireWildcard(require(\"query-string\"));\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\nvar _validatePathConfig = _interopRequireDefault(require(\"./validatePathConfig\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) { if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } } return n.default = e, t && t.set(e, n), n; }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction getStateFromPath(path, options) {\n  var _ref;\n  if (options) {\n    (0, _validatePathConfig.default)(options);\n  }\n  var initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = options === null || options === void 0 ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\" + config.pattern + \"' resolves to both '\" + a.join(' > ') + \"' and '\" + b.join(' > ') + \"'. Patterns must be unique and cannot resolve to more than one screen.\");\n      }\n    }\n    return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n    var match = remainingPath.match(config.regex);\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n    var _config$pattern;\n    var _ret = _loop(config);\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n    }\n    return (it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)) + \"\\\\/\";\n  }).join('') + \")\") : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: (0, _toConsumableArray2.default)(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = (0, _findFocusedRoute.default)(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["_escapeStringRegexp","_interopRequireDefault","require","queryString","_interopRequireWildcard","_findFocusedRoute","_validatePathConfig","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","next","bind","Array","isArray","_unsupportedIterableToArray","length","done","value","TypeError","minLen","_arrayLikeToArray","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","getStateFromPath","path","options","_ref","validatePathConfig","initialRoutes","initialRouteName","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","Boolean","map","segment","decodeURIComponent","createNestedStateObject","configs","concat","_toConsumableArray2","key","createNormalizedConfigs","sort","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","Error","_extends4","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","regex","RegExp","source","remainingPath","joinPaths","_ref2","_len","paths","_key","p","_loop","matchedParams","_config$pattern","_config$path","params","_config$parse","parse","_iterator","_step","_ret","routeConfig","initials","parentPattern","createConfigItem","exact","nestedConfig","_pattern","pop","escape","findParseConfigForRoute","routeName","flatConfig","_iterator2","_step2","findInitialRoute","_iterator3","_step3","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","findFocusedRoute","parseQueryParams","parseConfig","query"],"sources":["C:\\Users\\DELL\\Downloads\\ltmobile\\ltmobile\\muvi-master\\node_modules\\@react-navigation\\core\\lib\\module\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}