{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerRouter;\nexports.DrawerActions = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar _TabRouter = _interopRequireWildcard(require(\"./TabRouter\"));\nvar _excluded = [\"defaultStatus\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar DrawerActions = _objectSpread(_objectSpread({}, _TabRouter.TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexports.DrawerActions = DrawerActions;\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n    return it.type === 'drawer';\n  }));\n};\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: [].concat((0, _toConsumableArray2.default)(state.history), [{\n      type: 'drawer',\n      status: 'open'\n    }])\n  });\n};\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\nfunction DrawerRouter(_ref) {\n  var defaultStatus = _ref.defaultStatus,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var router = (0, _TabRouter.default)(rest);\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList,\n        routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (defaultStatus === 'open') {\n        state = openDrawer(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeGetIdList = _ref3.routeGetIdList;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      if (defaultStatus === 'open') {\n        return openDrawer(result);\n      }\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n          return openDrawer(state);\n        case 'GO_BACK':\n          if (defaultStatus === 'open') {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6DO,IAAMA,aAAa,mCACrBC,qBADwB;EAE3BC,UAAU,wBAAqB;IAC7B,OAAO;MAAEC,IAAI,EAAE;IAAR,CAAP;EACD,CAJ0B;EAK3BC,WAAW,yBAAqB;IAC9B,OAAO;MAAED,IAAI,EAAE;IAAR,CAAP;EACD,CAP0B;EAQ3BE,YAAY,0BAAqB;IAC/B,OAAO;MAAEF,IAAI,EAAE;IAAR,CAAP;EACD;AAAA,EAVI;AAAA;AAaP,IAAMG,YAAY,GAChBC,SADID,YAAY,CAChBC,KADmB;EAAA;EAAA,OAIhBC,OAAO,mBAACD,KAAK,CAACE,OAAP,mDAACC,eAAeC,IAAf,CAAqBC,YAAD;IAAA,OAAQA,EAAE,CAACT,IAAH,KAAY,QAAxC;EAAA,EAAD,CAJS;AAAA,CAArB;AAMA,IAAMD,UAAU,GACdK,SADIL,UAAU,CACdK,KADiB,EAEwB;EACzC,IAAID,YAAY,CAACC,KAAD,CAAhB,EAAyB;IACvB,OAAOA,KAAP;EACD;EAED,uCACKA,KADE;IAELE,OAAO,6CAAMF,KAAK,CAACE,OAAV,IAAmB;MAAEN,IAAI,EAAE,QAAR;MAAkBU,MAAM,EAAE;IAA1B,CAAnB;EAAA;AAEZ,CAXD;AAaA,IAAMT,WAAW,GACfG,SADIH,WAAW,CACfG,KADkB,EAEuB;EACzC,IAAI,CAACD,YAAY,CAACC,KAAD,CAAjB,EAA0B;IACxB,OAAOA,KAAP;EACD;EAED,uCACKA,KADE;IAELE,OAAO,EAAEF,KAAK,CAACE,OAAN,CAAcK,MAAd,CAAsBF,YAAD;MAAA,OAAQA,EAAE,CAACT,IAAH,KAAY,QAAzC;IAAA;EAAA;AAEZ,CAXD;AAae,SAASY,YAAT,OAMb;EAAA,IALAC,aADmC,QACnCA,aADmC;IAEhCC;EAKH,IAAMC,MAAM,GAAGC,sBAAS,EAACF,IAAD,CAAxB;EAKA,uCACKC,MADE;IAGLf,IAAI,EAAE,QAHD;IAKLiB,eAAe,kCAAiD;MAAA,IAA9CC,UAAF,SAAEA,UAAF;QAAcC,cAAd,SAAcA,cAAd;QAA8BC;MAC5C,IAAIhB,KAAK,GAAGW,MAAM,CAACE,eAAP,CAAuB;QACjCC,UADiC,EACjCA,UADiC;QAEjCC,cAFiC,EAEjCA,cAFiC;QAGjCC;MAHiC,CAAvB,CAAZ;MAMA,IAAIP,aAAa,KAAK,MAAtB,EAA8B;QAC5BT,KAAK,GAAGL,UAAU,CAACK,KAAD,CAAlB;MACD;MAED,uCACKA,KADE;QAELiB,KAAK,EAAE,KAFF;QAGLrB,IAAI,EAAE,QAHD;QAILsB,GAAG,cAAYC,qBAAM;MAAG;IAE3B,CAtBI;IAwBLC,kBAAkB,8BAChBC,YADgB,SAGhB;MAAA,IADEP,UAAF,SAAEA,UAAF;QAAcC,cAAd,SAAcA,cAAd;QAA8BC;MAE9B,IAAIK,YAAY,CAACJ,KAAb,KAAuB,KAA3B,EAAkC;QAChC,OAAOI,YAAP;MACD;MAED,IAAIrB,KAAK,GAAGW,MAAM,CAACS,kBAAP,CAA0BC,YAA1B,EAAwC;QAClDP,UADkD,EAClDA,UADkD;QAElDC,cAFkD,EAElDA,cAFkD;QAGlDC;MAHkD,CAAxC,CAAZ;MAMA,IAAIjB,YAAY,CAACsB,YAAD,CAAhB,EAAgC;QAC9BrB,KAAK,GAAGL,UAAU,CAACK,KAAD,CAAlB;MACD;MAED,uCACKA,KADE;QAELJ,IAAI,EAAE,QAFD;QAGLsB,GAAG,cAAYC,qBAAM;MAAG;IAE3B,CA/CI;IAiDLG,qBAAqB,iCAACtB,KAAD,EAAQkB,GAAR,EAAa;MAChC,IAAMK,MAAM,GAAGZ,MAAM,CAACW,qBAAP,CAA6BtB,KAA7B,EAAoCkB,GAApC,CAAf;MAEA,IAAIT,aAAa,KAAK,MAAtB,EAA8B;QAC5B,OAAOd,UAAU,CAAC4B,MAAD,CAAjB;MACD;MAED,OAAO1B,WAAW,CAAC0B,MAAD,CAAlB;IACD,CAzDI;IA2DLC,iBAAiB,6BAACxB,KAAD,EAAQyB,MAAR,EAAgBC,OAAhB,EAAyB;MACxC,QAAQD,MAAM,CAAC7B,IAAf;QACE,KAAK,aAAL;UACE,OAAOD,UAAU,CAACK,KAAD,CAAjB;QAEF,KAAK,cAAL;UACE,OAAOH,WAAW,CAACG,KAAD,CAAlB;QAEF,KAAK,eAAL;UACE,IAAID,YAAY,CAACC,KAAD,CAAhB,EAAyB;YACvB,OAAOH,WAAW,CAACG,KAAD,CAAlB;UACD;UAED,OAAOL,UAAU,CAACK,KAAD,CAAjB;QAEF,KAAK,SAAL;UACE,IAAIS,aAAa,KAAK,MAAtB,EAA8B;YAC5B,IAAI,CAACV,YAAY,CAACC,KAAD,CAAjB,EAA0B;cACxB,OAAOL,UAAU,CAACK,KAAD,CAAjB;YACD;UACF,CAJD,MAIO;YACL,IAAID,YAAY,CAACC,KAAD,CAAhB,EAAyB;cACvB,OAAOH,WAAW,CAACG,KAAD,CAAlB;YACD;UACF;UAED,OAAOW,MAAM,CAACa,iBAAP,CAAyBxB,KAAzB,EAAgCyB,MAAhC,EAAwCC,OAAxC,CAAP;QAEF;UACE,OAAOf,MAAM,CAACa,iBAAP,CAAyBxB,KAAzB,EAAgCyB,MAAhC,EAAwCC,OAAxC,CAAP;MAAA;IAEL,CA1FI;IA4FLC,cAAc,EAAElC;EAAAA;AAEnB","names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","_state$history","some","it","status","filter","DrawerRouter","defaultStatus","rest","router","TabRouter","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: 'open' | 'closed';\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: 'open' }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer', status: 'open' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  defaultStatus,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (defaultStatus === 'open') {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (defaultStatus === 'open') {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (defaultStatus === 'open') {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}