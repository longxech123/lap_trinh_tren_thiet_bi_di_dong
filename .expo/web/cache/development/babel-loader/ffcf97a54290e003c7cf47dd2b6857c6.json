{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SceneView;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _EnsureSingleNavigator = _interopRequireDefault(require(\"./EnsureSingleNavigator\"));\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\nvar _StaticContainer = _interopRequireDefault(require(\"./StaticContainer\"));\nvar _useOptionsGetters2 = _interopRequireDefault(require(\"./useOptionsGetters\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction SceneView(_ref) {\n  var screen = _ref.screen,\n    route = _ref.route,\n    navigation = _ref.navigation,\n    routeState = _ref.routeState,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    options = _ref.options,\n    clearOptions = _ref.clearOptions;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var _useOptionsGetters = (0, _useOptionsGetters2.default)({\n      key: route.key,\n      options: options,\n      navigation: navigation\n    }),\n    addOptionsGetter = _useOptionsGetters.addOptionsGetter;\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var isInitialRef = React.useRef(true);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n  });\n  React.useEffect(function () {\n    return clearOptions;\n  }, []);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return React.createElement(_NavigationStateContext.default.Provider, {\n    value: context\n  }, React.createElement(_EnsureSingleNavigator.default, null, React.createElement(_StaticContainer.default, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)));\n}","map":{"version":3,"mappings":"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","names":["SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","React","useRef","getKey","useCallback","current","useOptionsGetters","key","addOptionsGetter","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","NavigationStateContext","Provider","value","EnsureSingleNavigator","StaticContainer","name","render","children"],"sources":["SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}