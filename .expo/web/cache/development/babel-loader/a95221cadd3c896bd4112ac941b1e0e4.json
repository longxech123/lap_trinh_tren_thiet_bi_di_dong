{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _warnOnce = _interopRequireDefault(require(\"warn-once\"));\nvar _BottomTabView = _interopRequireDefault(require(\"../views/BottomTabView\"));\nvar _excluded = [\"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\", \"sceneContainerStyle\", \"lazy\", \"tabBarOptions\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction BottomTabNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    sceneContainerStyle = _ref.sceneContainerStyle,\n    lazy = _ref.lazy,\n    tabBarOptions = _ref.tabBarOptions,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var defaultScreenOptions = {};\n  if (tabBarOptions) {\n    var _tabBarOptions$labelP;\n    (0, _extends3.default)(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition: (_tabBarOptions$labelP = tabBarOptions.labelPosition) !== null && _tabBarOptions$labelP !== void 0 ? _tabBarOptions$labelP : tabBarOptions.adaptive === false ? 'below-icon' : undefined,\n      tabBarStyle: [{\n        display: tabBarOptions.tabBarVisible ? 'none' : 'flex'\n      }, defaultScreenOptions.tabBarStyle]\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    (0, _warnOnce.default)(tabBarOptions, \"Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.\");\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    (0, _warnOnce.default)(true, \"Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.\");\n  }\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.TabRouter, {\n      initialRouteName: initialRouteName,\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(_BottomTabView.default, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    sceneContainerStyle: sceneContainerStyle\n  })));\n}\nvar _default = (0, _native.createNavigatorFactory)(BottomTabNavigator);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;AAUA;AACA;AAOA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAWA,SAASA,kBAAT,OAYU;EAAA,IAXRC,gBAD0B,QAC1BA,gBAD0B;IAE1BC,YAF0B,QAE1BA,YAF0B;IAG1BC,QAH0B,QAG1BA,QAH0B;IAI1BC,eAJ0B,QAI1BA,eAJ0B;IAK1BC,aAL0B,QAK1BA,aAL0B;IAM1BC,mBAN0B,QAM1BA,mBAN0B;IAQ1BC,IAR0B,QAQ1BA,IAR0B;IAU1BC,aAV0B,QAU1BA,aAV0B;IAWvBC;EAEH,IAAIC,oBAAgD,GAAG,EAAvD;EAEA,IAAIF,aAAJ,EAAmB;IAAA;IACjBG,uBAAcD,oBAAd,EAAoC;MAClCE,oBAAoB,EAAEJ,aAAa,CAACK,mBADF;MAElCC,qBAAqB,EAAEN,aAAa,CAACO,eAFH;MAGlCC,uBAAuB,EAAER,aAAa,CAACS,iBAHL;MAIlCC,2BAA2B,EAAEV,aAAa,CAACW,qBAJT;MAKlCC,6BAA6B,EAAEZ,aAAa,CAACa,uBALX;MAMlCC,sBAAsB,EAAEd,aAAa,CAACe,gBANJ;MAOlCC,eAAe,EAAEhB,aAAa,CAACiB,SAPG;MAQlCC,gBAAgB,EAAElB,aAAa,CAACmB,UARE;MASlCC,eAAe,EAAEpB,aAAa,CAACqB,SATG;MAUlCC,eAAe,EAAEtB,aAAa,CAACuB,QAVG;MAWlCC,mBAAmB,2BACjBxB,aAAa,CAACyB,aADG,yEAEhBzB,aAAa,CAAC0B,QAAd,KAA2B,KAA3B,GAAmC,YAAnC,GAAkDC,SAbnB;MAclCC,WAAW,EAAE,CACX;QAAEC,OAAO,EAAE7B,aAAa,CAAC8B,aAAd,GAA8B,MAA9B,GAAuC;MAAlD,CADW,EAEX5B,oBAAoB,CAAC0B,WAFV;IAdqB,CAApC;IAqBEzB,MAAM,CAAC4B,IAAP,CAAY7B,oBAAZ,CADF,CAEE8B,OAFF,CAEWC,aAAD,EAAS;MACjB,IAAI/B,oBAAoB,CAAC+B,GAAD,CAApB,KAA8BN,SAAlC,EAA6C;QAE3C,OAAOzB,oBAAoB,CAAC+B,GAAD,CAA3B;MACD;IACF,CAPD;IASAC,qBAAQ,EACNlC,aADM,gMAEsLmC,IAAI,CAACC,SAAL,CAC1LlC,oBAD0L,EAE1L,IAF0L,EAG1L,CAH0L,CAI1L,6FANJ;EAQD;EAED,IAAI,OAAOH,IAAP,KAAgB,SAApB,EAA+B;IAC7BG,oBAAoB,CAACH,IAArB,GAA4BA,IAA5B;IAEAmC,qBAAQ,EACN,IADM,kLAAR;EAID;EAED,4BACEG,gCAAoB,EAMlBC,iBANkB,EAMP;MACX7C,gBADW,EACXA,gBADW;MAEXC,YAFW,EAEXA,YAFW;MAGXC,QAHW,EAGXA,QAHW;MAIXC,eAJW,EAIXA,eAJW;MAKXC,aALW,EAKXA,aALW;MAMXK;IANW,CANO,CADtB;IAAQqC,KAAF,yBAAEA,KAAF;IAASC,WAAT,yBAASA,WAAT;IAAsBC,UAAtB,yBAAsBA,UAAtB;IAAkCC;EAgBxC,OACEC,oBAACD,iBAAD,QACEC,oBAACC,sBAAD,eACM3C,IADN;IAEEsC,KAAK,EAAEA,KAFT;IAGEE,UAAU,EAAEA,UAHd;IAIED,WAAW,EAAEA,WAJf;IAKE1C,mBAAmB,EAAEA;EALvB,GADF,CADF;AAWD;AAAA,eAEc+C,kCAAsB,EAKnCrD,kBALmC,CAArC;AAAA","names":["BottomTabNavigator","initialRouteName","backBehavior","children","screenListeners","screenOptions","sceneContainerStyle","lazy","tabBarOptions","rest","defaultScreenOptions","Object","tabBarHideOnKeyboard","keyboardHidesTabBar","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarActiveBackgroundColor","activeBackgroundColor","tabBarInactiveBackgroundColor","inactiveBackgroundColor","tabBarAllowFontScaling","allowFontScaling","tabBarShowLabel","showLabel","tabBarLabelStyle","labelStyle","tabBarIconStyle","iconStyle","tabBarItemStyle","tabStyle","tabBarLabelPosition","labelPosition","adaptive","undefined","tabBarStyle","display","tabBarVisible","keys","forEach","key","warnOnce","JSON","stringify","useNavigationBuilder","TabRouter","state","descriptors","navigation","NavigationContent","React","BottomTabView","createNavigatorFactory"],"sources":["createBottomTabNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationEventMap,\n  BottomTabNavigationOptions,\n} from '../types';\nimport BottomTabView from '../views/BottomTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap\n> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  sceneContainerStyle,\n  // @ts-expect-error: lazy is deprecated\n  lazy,\n  // @ts-expect-error: tabBarOptions is deprecated\n  tabBarOptions,\n  ...rest\n}: Props) {\n  let defaultScreenOptions: BottomTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition:\n        tabBarOptions.labelPosition ??\n        (tabBarOptions.adaptive === false ? 'below-icon' : undefined),\n      tabBarStyle: [\n        { display: tabBarOptions.tabBarVisible ? 'none' : 'flex' },\n        defaultScreenOptions.tabBarStyle,\n      ],\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof BottomTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      BottomTabNavigationOptions,\n      BottomTabNavigationEventMap\n    >(TabRouter, {\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        sceneContainerStyle={sceneContainerStyle}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"]},"metadata":{},"sourceType":"script"}