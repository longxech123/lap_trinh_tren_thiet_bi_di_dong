{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _EmitterSubscription = _interopRequireDefault(require(\"./EmitterSubscription\"));\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./EventSubscriptionVendor\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n  var _proto = EventEmitter.prototype;\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n  };\n  _proto.once = function once(eventType, listener, context) {\n    var _this = this;\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      listener.apply(context, args);\n    });\n  };\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    (0, _invariant.default)(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n    this._subscriber.removeSubscription(subscription);\n  };\n  _proto.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions ? subscriptions.filter(sparseFilterPredicate).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n      this._currentSubscription = null;\n    }\n  };\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n  return EventEmitter;\n}();\nvar _default = EventEmitter;\nexports.default = _default;","map":{"version":3,"names":["sparseFilterPredicate","EventEmitter","subscriber","_subscriber","EventSubscriptionVendor","_proto","prototype","addListener","eventType","listener","context","addSubscription","EmitterSubscription","once","_this","removeCurrentListener","_len","arguments","length","args","Array","_key","apply","removeAllListeners","removeAllSubscriptions","invariant","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","map","emit","i","l","slice","call","removeListener","remove"],"sources":["D:/EPU/kÃ¬ 1 2022-2023/ltmobile/muvi-master/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\n'use strict';\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\nimport invariant from 'fbjs/lib/invariant';\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\n\nvar EventEmitter =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  ;\n\n  _proto.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      listener.apply(context, args);\n    });\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  ;\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  }\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  ;\n\n  _proto.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    .filter(sparseFilterPredicate).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  }\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"],"mappings":"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"},"metadata":{},"sourceType":"script"}