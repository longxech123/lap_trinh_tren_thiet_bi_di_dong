{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _CardStyleInterpolators = require(\"../../TransitionConfigs/CardStyleInterpolators\");\nvar _TransitionPresets = require(\"../../TransitionConfigs/TransitionPresets\");\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\nvar _Screens = require(\"../Screens\");\nvar _Card = require(\"./Card\");\nvar _CardContainer = _interopRequireDefault(require(\"./CardContainer\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = (0, _Card.getIsModalPresentation)(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = _reactNative.StyleSheet.flatten(headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : (0, _elements.getDefaultHeaderHeight)(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    presentation = _ref.presentation,\n    _ref$gestureDirection = _ref.gestureDirection,\n    gestureDirection = _ref$gestureDirection === void 0 ? presentation === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref$gestureDirection;\n  return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  (0, _inherits2.default)(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleHeaderLayout\", function (_ref2) {\n      var route = _ref2.route,\n        height = _ref2.height;\n      _this.setState(function (_ref3) {\n        var headerHeights = _ref3.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, (0, _defineProperty3.default)({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPreviousScene\", function (_ref4) {\n      var route = _ref4.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: _elements.SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        isParentModal = _this$props.isParentModal,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : (0, _Card.getIsModalPresentation)(options.cardStyleInterpolator) ? i !== scenes.map(function (scene) {\n            return scene.descriptor.options.cardStyleInterpolator;\n          }).lastIndexOf(_CardStyleInterpolators.forModalPresentationIOS) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(_elements.Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(_Screens.MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n          headerTransparent = _scene$descriptor$opt2.headerTransparent,\n          headerStyle = _scene$descriptor$opt2.headerStyle,\n          headerTintColor = _scene$descriptor$opt2.headerTintColor;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var _ref5 = _reactNative.StyleSheet.flatten(headerStyle) || {},\n          headerBackgroundColor = _ref5.backgroundColor;\n        var headerDarkContent;\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = (0, _color.default)(headerTintColor).isDark();\n          } else if (typeof headerBackgroundColor === 'string') {\n            headerDarkContent = !(0, _color.default)(headerBackgroundColor).isDark();\n          }\n        }\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(_Screens.MaybeScreen, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(_CardContainer.default, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref6 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref6.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? _TransitionPresets.ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? _TransitionPresets.ModalFadeTransition : _TransitionPresets.DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n          animationEnabled = _optionsForTransition === void 0 ? _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos' : _optionsForTransition,\n          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? _reactNative.Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? _reactNative.Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator)) && _reactNative.Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexports.default = CardStack;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;AAUA;AACA;AACA;AAQA;AAIA;AAaA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AA0CA,IAAMA,OAAO,GAAG,IAAhB;AAEA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,gCAAgC,GAAG,CAAzC;AACA,IAAMC,YAAY,GAAG,CAArB;AAEA,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc;EAAEC,OAAO,EAAE;AAAX,CAAd,CAA5B;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIC,MAAD,EAAkBC,KAAlB,EAAoC;EAChE,IAAQC,wBAA0BF,MAAM,CAACC,KAAD,CAAN,CAAcE,UAAd,CAAyBL,OAA3D,CAAQI;EAGR,IAAIE,kBAAkB,GAAG,CAAzB;EAEA,KAAK,IAAIC,CAAC,GAAGJ,KAAK,GAAG,CAArB,EAAwBI,CAAC,IAAI,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;IAAA;IACnC,IAAMC,4BAA4B,gBAChCN,MAAM,CAACK,CAAD,CAD0B,8CAChCE,UAAWJ,UAAX,CAAsBL,OAAtB,CAA8BI,qBADhC;IAGA,IAAII,4BAA4B,KAAKJ,qBAArC,EAA4D;MAC1D;IACD;IAEDE,kBAAkB;EACnB;EAED,OAAOA,kBAAP;AACD,CAlBD;AAoBA,IAAMI,UAAU,GAAG,SAAbA,UAAU,CACdC,KADiB,EAEjBL,kBAFiB,EAGjBM,aAHiB,EAId;EACH,IAAIA,aAAJ,EAAmB;IACjB,OAAO,IAAP;EACD;EAED,IAAQR,wBAA0BO,KAAK,CAACN,UAAN,CAAiBL,OAAnD,CAAQI;EACR,IAAMS,mBAAmB,GAAGC,gCAAsB,EAACV,qBAAD,CAAlD;EACA,IAAMW,OAAO,GAAGF,mBAAmB,IAAIP,kBAAkB,KAAK,CAA9D;EAEA,OAAOS,OAAP;AACD,CAdD;AAgBA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CACpBd,MADuB,EAEvBe,MAFuB,EAGvBC,mBAHuB,EAIvBN,aAJuB,EAKvBO,MALuB,EAMvBC,QANuB,EAOpB;EACH,OAAOlB,MAAM,CAACmB,MAAP,CAAsC,UAACC,GAAD,EAAMC,IAAN,EAAYpB,KAAZ,EAAsB;IACjE,4BAGIoB,IAAI,CAAClB,UAAL,CAAgBL,OAHpB;MAAA,+CACEwB,qBAAqB;MAArBA,qBAAqB,uCAAGN,mBAAmB,GAAG,CAAH,GAAOD,MAAM,CAACQ,GADrD;MAEJC;IAGF,IAAMC,KAAK,GAAGC,uBAAU,CAACC,OAAX,CAAmBH,WAAW,IAAI,EAAlC,CAAd;IAEA,IAAMI,MAAM,GACV,OAAOH,KAAK,CAACG,MAAb,KAAwB,QAAxB,GACIH,KAAK,CAACG,MADV,GAEIV,QAAQ,CAACG,IAAI,CAACQ,KAAL,CAAWC,GAAZ,CAHd;IAKA,IAAM1B,kBAAkB,GAAGL,qBAAqB,CAACC,MAAD,EAASC,KAAT,CAAhD;IACA,IAAMY,OAAO,GAAGL,UAAU,CAACa,IAAD,EAAOjB,kBAAP,EAA2BM,aAA3B,CAA1B;IAEAU,GAAG,CAACC,IAAI,CAACQ,KAAL,CAAWC,GAAZ,CAAH,GACE,OAAOF,MAAP,KAAkB,QAAlB,GACIA,MADJ,GAEIG,oCAAsB,EAACd,MAAD,EAASJ,OAAT,EAAkBS,qBAAlB,CAH5B;IAKA,OAAOF,GAAP;EACD,CAtBM,EAsBJ,EAtBI,CAAP;AAuBD,CA/BD;AAiCA,IAAMY,sBAAsB,GAAG,SAAzBA,sBAAsB,CAC1Bf,MAD6B,EAE7Bd,UAF6B,EAG1B;EACH,WAKK,WAAU,SAAV,cAAU,WAAV,sBAAU,CAAEL,OAAZ,KAAuB,EAL5B;IACEmC,YADI,QACJA,YADI;IAAA,6BAEJC,gBAAgB;IAAhBA,gBAAgB,sCAAGD,YAAY,KAAK,OAAjB,GACfE,kCAAe,CAACD,gBADD,GAEfE,oCAAiB,CAACF;EAGxB,OAAOG,oCAAuB,EAACpB,MAAD,EAASiB,gBAAT,CAA9B;AACD,CAZD;AAcA,IAAMI,sBAAsB,GAAG,SAAzBA,sBAAsB,CAC1BC,OAD6B,EAE7BtB,MAF6B,EAG7Bd,UAH6B,EAI1B;EACH,IAAMqC,QAAQ,GAAGR,sBAAsB,CACrC;IAGES,KAAK,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY1B,MAAM,CAACwB,KAAnB,CAHT;IAIEb,MAAM,EAAEc,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY1B,MAAM,CAACW,MAAnB;EAJV,CADqC,EAOrCzB,UAPqC,CAAvC;EAUA,IAAIqC,QAAQ,GAAG,CAAf,EAAkB;IAChB,OAAOD,OAAO,CAACK,WAAR,CAAoB;MACzBC,UAAU,EAAE,CAAC,CAAD,EAAIL,QAAJ,CADa;MAEzBM,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;IAFY,CAApB,CAAP;EAID;EAED,OAAOP,OAAO,CAACK,WAAR,CAAoB;IACzBC,UAAU,EAAE,CAACL,QAAD,EAAW,CAAX,CADa;IAEzBM,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;EAFY,CAApB,CAAP;AAID,CA1BD;AAAA,IA4BqBC,SAAN;EAAA;EAAA;EAqLbC,mBAAYC,MAAD,EAAe;IAAA;IAAA;IACxB,0BAAMA,MAAN;IADwBC,6EAkBFC,WAAD,EAA0B;MAC/C,4BAA0BA,CAAC,CAACC,WAAF,CAAcnC,MAAxC;QAAQW,MAAF,yBAAEA,MAAF;QAAUa;MAEhB,IAAMxB,MAAM,GAAG;QAAEwB,KAAF,EAAEA,KAAF;QAASb;MAAT,CAAf;MAEA,MAAKyB,QAAL,CAAc,UAACC,KAAD,EAAQL,KAAR,EAAkB;QAC9B,IAAIrB,MAAM,KAAK0B,KAAK,CAACrC,MAAN,CAAaW,MAAxB,IAAkCa,KAAK,KAAKa,KAAK,CAACrC,MAAN,CAAawB,KAA7D,EAAoE;UAClE,OAAO,IAAP;QACD;QAED,OAAO;UACLxB,MADK,EACLA,MADK;UAELsC,aAAa,EAAEzC,gBAAgB,CAC7BwC,KAAK,CAACtD,MADuB,EAE7BiD,KAAK,CAAClC,MAFuB,EAG7BkC,KAAK,CAACjC,mBAHuB,EAI7BiC,KAAK,CAACvC,aAJuB,EAK7BO,MAL6B,EAM7BqC,KAAK,CAACC,aANuB;QAF1B,CAAP;MAWD,CAhBD;IAiBD,CAxCyB;IAAAL,mFA0CG,iBAMvB;MAAA,IALJrB,KAD4B,SAC5BA,KAD4B;QAE5BD;MAKA,MAAKyB,QAAL,CAAc,iBAAuB;QAAA,IAApBE;QACf,IAAMC,cAAc,GAAGD,aAAa,CAAC1B,KAAK,CAACC,GAAP,CAApC;QAEA,IAAI0B,cAAc,KAAK5B,MAAvB,EAA+B;UAC7B,OAAO,IAAP;QACD;QAED,OAAO;UACL2B,aAAa,kCACRA,aADU,yCAEZ1B,KAAK,CAACC,GAAP,EAAaF;QAHV,CAAP;MAMD,CAbD;IAcD,CA/DyB;IAAAsB,gFAiEA,YAAM;MAC9B,IAAQI,QAAU,MAAKL,KAAvB,CAAQK;MAER,OAAOA,KAAK,CAACG,MAAN,CAAaH,KAAK,CAACrD,KAAnB,CAAP;IACD,CArEyB;IAAAiD,iFAuEC,iBAAyC;MAAA,IAAtCrB;MAC5B,IAAQ6B,mBAAqB,MAAKT,KAAlC,CAAQS;MACR,IAAQ1D,SAAW,MAAKsD,KAAxB,CAAQtD;MAER,IAAM2D,aAAa,GAAGD,gBAAgB,CAAC;QAAE7B;MAAF,CAAD,CAAtC;MAEA,IAAI8B,aAAJ,EAAmB;QACjB,IAAMC,aAAa,GAAG5D,MAAM,CAAC6D,IAAP,CACnBpD,eAAD;UAAA,OAAWA,KAAK,CAACN,UAAN,CAAiB0B,KAAjB,CAAuBC,GAAvB,KAA+B6B,aAAa,CAAC7B,GADpC;QAAA,EAAtB;QAIA,OAAO8B,aAAP;MACD;MAED,OAAOE,SAAP;IACD,CAtFyB;IAGxB,MAAKR,KAAL,GAAa;MACXG,MAAM,EAAE,EADG;MAEXzD,MAAM,EAAE,EAFG;MAGX+D,QAAQ,EAAE,EAHC;MAIX9C,MAAM,EAAE+C,gCAAsB,CAACC,cAAvB,CAAsCC,KAJnC;MAKXC,WAAW,EAAE,MAAKlB,KAAL,CAAWkB,WALb;MAWXZ,aAAa,EAAE;IAXJ,CAAb;IAAA;EAaD;EAAA;IAAA;IAAA,OAwEDa,kBAAS;MAAA;MACP,kBAmBI,KAAKnB,KAnBT;QACElC,MADI,eACJA,MADI;QAEJuC,KAFI,eAEJA,KAFI;QAGJG,MAHI,eAGJA,MAHI;QAIJY,gBAJI,eAIJA,gBAJI;QAKJC,WALI,eAKJA,WALI;QAMJC,YANI,eAMJA,YANI;QAOJC,YAPI,eAOJA,YAPI;QAQJC,WARI,eAQJA,WARI;QASJzD,mBATI,eASJA,mBATI;QAUJN,aAVI,eAUJA,aAVI;QAWJgE,iBAXI,eAWJA,iBAXI;QAYJC,eAZI,eAYJA,eAZI;QAaJC,cAbI,eAaJA,cAbI;QAcJC,YAdI,eAcJA,YAdI;QAeJC,eAfI,eAeJA,eAfI;QAAA,oCAgBJC,qBAAqB;QAArBA,qBAAqB,sCAAGC,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IACtBD,qBAAQ,CAACC,EAAT,KAAgB,SADM,IAEtBD,qBAAQ,CAACC,EAAT,KAAgB;MAGpB,kBAAoD,KAAK3B,KAAzD;QAAQtD,MAAF,eAAEA,MAAF;QAAUiB,MAAV,eAAUA,MAAV;QAAkB8C,QAAlB,eAAkBA,QAAlB;QAA4BR;MAElC,IAAM2B,YAAY,GAAG5B,KAAK,CAACG,MAAN,CAAaH,KAAK,CAACrD,KAAnB,CAArB;MACA,IAAMkF,mBAAmB,GAAG5B,aAAa,CAAC2B,YAAY,CAACpD,GAAd,CAAzC;MAEA,IAAMsD,qBAAqB,GAAG,KAAK9B,KAAL,CAAWtD,MAAX,CAAkBqF,KAAlB,CAAwB,CAAC,CAAzB,EAA4BC,IAA5B,CAAkC7E,eAAD,EAAW;QAAA;QACxE,IAAMX,OAAO,4BAAGW,KAAK,CAACN,UAAN,CAAiBL,OAApB,yEAA+B,EAA5C;QACA,IAAQyF,UAAF,GAAwDzF,OAA9D,CAAQyF,UAAF;UAAcC,iBAAd,GAAwD1F,OAA9D,CAAoB0F,iBAAd;UAAA,uBAAwD1F,OAA9D,CAAuC2F,WAAW;UAAXA,WAAW,qCAAG;QAErD,IACED,iBAAiB,IACjBC,WAAW,KAAK,KADhB,IAEAF,UAAU,KAAK,QAHjB,EAIE;UACA,OAAO,IAAP;QACD;QAED,OAAO,KAAP;MACD,CAb6B,CAA9B;MAeA,IAAIG,kBAAkB,GAAG,CAAzB;MAEA,KAAK,IAAIrF,CAAC,GAAGL,MAAM,CAAC2F,MAAP,GAAgB,CAA7B,EAAgCtF,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;QAC3C,IAAQP,UAAYE,MAAM,CAACK,CAAD,CAAN,CAAUF,UAA9B,CAAQL;QACR,4BAUIA,OAVJ,CAEE8F,oBAAoB;UAApBA,oBAAoB,sCAAG9F,OAAO,CAACmC,YAAR,KAAyB,kBAAzB,GACnB,KADmB,GAEnBrB,gCAAsB,EAACd,OAAO,CAACI,qBAAT,CAAtB,GACAG,CAAC,KACDL,MAAM,CACH6F,GADH,CACQpF,eAAD;YAAA,OAAWA,KAAK,CAACN,UAAN,CAAiBL,OAAjB,CAAyBI,qBAD3C;UAAA,GAEG4F,WAFH,CAEeC,+CAFf,CAFA,GAKA;QAGN,IAAIH,oBAAoB,KAAK,KAA7B,EAAoC;UAClCF,kBAAkB;QACnB,CAFD,MAEO;UACL;QACD;MACF;MAED,IAAMM,cAAc,GAClBC,oBAACA,KAAD,CAAOC,QAAP;QAAgBpE,GAAG,EAAC;MAApB,GACG0C,YAAY,CAAC;QACZ2B,IAAI,EAAE,OADM;QAEZlF,MAFY,EAEZA,MAFY;QAGZjB,MAHY,EAGZA,MAHY;QAIZoG,gBAAgB,EAAE,KAAKA,gBAJX;QAKZC,eAAe,EAAE,KAAKA,eALV;QAMZC,qBAAqB,EAAE,KAAKC,kBANhB;QAOZ9E,KAAK,EAAE,CACL+E,MAAM,CAACC,QADF,EAELrB,qBAAqB,IAAI,CAEvB;UAAExD,MAAM,EAAEuD;QAAV,CAFuB,EAGvBqB,MAAM,CAACE,QAHgB,CAFpB;MAPK,CAAD,CADf,CADF;MAqBA,OACET,oBAACU,oBAAD,QACGvB,qBAAqB,GAAG,IAAH,GAAUY,cADlC,EAEEC,oBAACW,6BAAD;QACEC,OAAO,EAAE9B,qBADX;QAEEtD,KAAK,EAAE+E,MAAM,CAACM,SAFhB;QAGEC,QAAQ,EAAE,KAAKC;MAHjB,GAKGvD,MAAM,CAACoC,GAAP,CAAW,UAAChE,KAAD,EAAQ5B,KAAR,EAAegH,IAAf,EAAwB;QAAA;QAClC,IAAMC,OAAO,GAAGhC,YAAY,CAACpD,GAAb,KAAqBD,KAAK,CAACC,GAA3C;QACA,IAAMS,OAAO,GAAGwB,QAAQ,CAAClC,KAAK,CAACC,GAAP,CAAxB;QACA,IAAMrB,KAAK,GAAGT,MAAM,CAACC,KAAD,CAApB;QAMA,IAAIkH,cAA0D,GAAG,CAAjE;QAEA,IAAIlH,KAAK,GAAGgH,IAAI,CAACtB,MAAL,GAAcD,kBAAd,GAAmC,CAA/C,EAAkD;UAEhDyB,cAAc,GAAG3H,cAAjB;QACD,CAHD,MAGO;UACL,IAAM4H,gBAAgB,GAAGpH,MAAM,CAACiH,IAAI,CAACtB,MAAL,GAAc,CAAf,CAA/B;UACA,IAAM0B,WAAW,GACfpH,KAAK,KAAKgH,IAAI,CAACtB,MAAL,GAAc,CAAxB,GACIjG,YADJ,GAEIO,KAAK,IAAIgH,IAAI,CAACtB,MAAL,GAAcD,kBAAvB,GACAjG,gCADA,GAEAD,cALN;UAMA2H,cAAc,GAAGC,gBAAgB,GAC7BA,gBAAgB,CAACE,QAAjB,CAA0BC,OAA1B,CAAkC3E,WAAlC,CAA8C;YAC5CC,UAAU,EAAE,CAAC,CAAD,EAAI,IAAItD,OAAR,EAAiB,CAAjB,CADgC;YAE5CuD,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOuE,WAAP,CAF+B;YAG5CG,WAAW,EAAE;UAH+B,CAA9C,CAD6B,GAM7B/H,gCANJ;QAOD;QAED,6BAKIgB,KAAK,CAACN,UAAN,CAAiBL,OALrB;UAAA,gDACE2F,WAAW;UAAXA,WAAW,uCAAG,IADV;UAEJD,iBAFI,0BAEJA,iBAFI;UAGJhE,WAHI,0BAGJA,WAHI;UAIJiG;QAGF,IAAMC,gBAAgB,GAAG3G,MAAM,CAACQ,GAAhC;QACA,IAAMoG,kBAAkB,GAAG5G,MAAM,CAAC6G,KAAlC;QACA,IAAMC,mBAAmB,GAAG9G,MAAM,CAAC+G,MAAnC;QACA,IAAMC,iBAAiB,GAAGhH,MAAM,CAACiH,IAAjC;QAEA,IAAMC,YAAY,GAChBxC,WAAW,KAAK,KAAhB,GAAwBlC,aAAa,CAAC1B,KAAK,CAACC,GAAP,CAArC,GAAmD,CADrD;QAGA,YACEJ,uBAAU,CAACC,OAAX,CAAmBH,WAAnB,KAAmC,EADrC;UAAyB0G,8BAAjBC,eAAe;QAGvB,IAAIC,iBAAJ;QAEA,IAAI3C,WAAJ,EAAiB;UACf,IAAI,OAAOgC,eAAP,KAA2B,QAA/B,EAAyC;YACvCW,iBAAiB,GAAGC,kBAAK,EAACZ,eAAD,CAAL,CAAuBa,MAAvB,EAApB;UACD,CAFD,MAEO,IAAI,OAAOJ,qBAAP,KAAiC,QAArC,EAA+C;YACpDE,iBAAiB,GAAG,CAACC,kBAAK,EAACH,qBAAD,CAAL,CAA6BI,MAA7B,EAArB;UACD;QACF;QAGD,IAAMlI,kBAAkB,GAAGL,qBAAqB,CAACC,MAAD,EAASC,KAAT,CAAhD;QACA,IAAMY,OAAO,GAAGL,UAAU,CACxBC,KADwB,EAExBL,kBAFwB,EAGxBM,aAHwB,CAA1B;QAMA,IAAM6H,uBAAuB,GAC3B,kBAAM,CAACtI,KAAK,GAAG,CAAT,CAAN,oDAAmBE,UAAnB,CAA8BL,OAA9B,CAAsCmC,YAAtC,MACA,kBAFF;QAIA,IAAMuG,mBAAmB,GACvB,mBAAM,CAACvI,KAAK,GAAG,CAAT,CAAN,sDAAmBE,UAAnB,CAA8BL,OAA9B,CAAsC8F,oBAAtC,MACA,KAFF;QAIA,OACEK,oBAACwC,oBAAD;UACE3G,GAAG,EAAED,KAAK,CAACC,GADb;UAEEL,KAAK,EAAEC,uBAAU,CAACgH,YAFpB;UAGE7B,OAAO,EAAE9B,qBAHX;UAIE4D,MAAM,EAAExB,cAJV;UAKEyB,aAAa,EAAC;QALhB,GAOE3C,oBAAC4C,sBAAD;UACE5I,KAAK,EAAEA,KADT;UAEEG,kBAAkB,EAAEA,kBAFtB;UAGE0I,KAAK,EAAEjI,OAHT;UAIE8H,MAAM,EAAE1I,KAAK,KAAKgH,IAAI,CAACtB,MAAL,GAAc,CAJlC;UAKEuB,OAAO,EAAEA,OALX;UAME6B,OAAO,EAAE1E,gBAAgB,CAAC2E,QAAjB,CAA0BnH,KAAK,CAACC,GAAhC,CANX;UAOEb,MAAM,EAAEA,MAPV;UAQEsB,OAAO,EAAEA,OARX;UASE9B,KAAK,EAAEA,KATT;UAUEiH,gBAAgB,EAAEA,gBAVpB;UAWEC,kBAAkB,EAAEA,kBAXtB;UAYEE,mBAAmB,EAAEA,mBAZvB;UAaEE,iBAAiB,EAAEA,iBAbrB;UAcEnD,cAAc,EAAEA,cAdlB;UAeEE,eAAe,EAAEA,eAfnB;UAgBED,YAAY,EAAEA,YAhBhB;UAiBEoD,YAAY,EAAEA,YAjBhB;UAkBEjH,mBAAmB,EAAEA,mBAlBvB;UAmBEiI,oBAAoB,EAAE,OAAK1C,kBAnB7B;UAoBEH,gBAAgB,EAAE,OAAKA,gBApBzB;UAqBEC,eAAe,EAAE,OAAKA,eArBxB;UAsBE+B,iBAAiB,EAAEA,iBAtBrB;UAuBEc,sBAAsB,EACpB9D,qBAAqB,IAAI,CAACI,iBAxB9B;UA0BEhB,YAAY,EAAEA,YA1BhB;UA2BEC,WAAW,EAAEA,WA3Bf;UA4BEH,WAAW,EAAEA,WA5Bf;UA6BEC,YAAY,EAAEA,YA7BhB;UA8BEG,iBAAiB,EAAEA,iBA9BrB;UA+BEC,eAAe,EAAEA,eA/BnB;UAgCE4D,uBAAuB,EAAEA,uBAhC3B;UAiCEC,mBAAmB,EAAEA;QAjCvB,EAPF,CADF;MA6CD,CAxHA,CALH,CAFF,EAiIGpD,qBAAqB,GAAGY,cAAH,GAAoB,IAjI5C,CADF;IAqID;EAAA;IAAA;IAAA,OAve8B,kCAC7B/C,KAD6B,EAE7BK,KAF6B,EAGN;MACvB,IACEL,KAAK,CAACQ,MAAN,KAAiBH,KAAK,CAACG,MAAvB,IACAR,KAAK,CAACkB,WAAN,KAAsBb,KAAK,CAACa,WAF9B,EAGE;QACA,OAAO,IAAP;MACD;MAED,IAAMJ,QAAQ,GAAGd,KAAK,CAACQ,MAAN,CAAatC,MAAb,CAAmC,UAACC,GAAD,EAAMC,IAAN,EAAe;QACjE,IAAMlB,UAAU,GAAG8C,KAAK,CAACkB,WAAN,CAAkB9C,IAAI,CAACS,GAAvB,CAAnB;QACA,YAA6B,WAAU,SAAV,cAAU,WAAV,sBAAU,CAAEhC,OAAZ,KAAuB,EAApD;UAAQqJ;QAER/H,GAAG,CAACC,IAAI,CAACS,GAAN,CAAH,GACEwB,KAAK,CAACS,QAAN,CAAe1C,IAAI,CAACS,GAApB,KACA,IAAIsH,qBAAQ,CAACC,KAAb,CACEpG,KAAK,CAACqG,gBAAN,CAAuBN,QAAvB,CAAgC3H,IAAI,CAACS,GAArC,KACAqH,gBAAgB,KAAK,KADrB,GAEInH,sBAAsB,CAACsB,KAAK,CAACrC,MAAP,EAAed,UAAf,CAF1B,GAGI,CAJN,CAFF;QASA,OAAOiB,GAAP;MACD,CAdgB,EAcd,EAdc,CAAjB;MAgBA,IAAMpB,MAAM,GAAGiD,KAAK,CAACQ,MAAN,CAAaoC,GAAb,CAAiB,UAAChE,KAAD,EAAQ5B,KAAR,EAAegH,IAAf,EAAwB;QAAA;QACtD,IAAMtD,aAAa,GAAGsD,IAAI,CAAChH,KAAK,GAAG,CAAT,CAA1B;QACA,IAAMsJ,SAAS,GAAGtC,IAAI,CAAChH,KAAK,GAAG,CAAT,CAAtB;QAEA,IAAMuJ,QAAQ,GAAGlG,KAAK,CAACtD,MAAN,CAAaC,KAAb,CAAjB;QAEA,IAAMwJ,cAAc,GAAG1F,QAAQ,CAAClC,KAAK,CAACC,GAAP,CAA/B;QACA,IAAM4H,eAAe,GAAG/F,aAAa,GACjCI,QAAQ,CAACJ,aAAa,CAAC7B,GAAf,CADyB,GAEjCgC,SAFJ;QAGA,IAAM6F,WAAW,GAAGJ,SAAS,GAAGxF,QAAQ,CAACwF,SAAS,CAACzH,GAAX,CAAX,GAA6BgC,SAA1D;QAEA,IAAM3D,UAAU,GACd8C,KAAK,CAACkB,WAAN,CAAkBtC,KAAK,CAACC,GAAxB,KACAwB,KAAK,CAACa,WAAN,CAAkBtC,KAAK,CAACC,GAAxB,CADA,KAEC0H,QAAQ,GAAGA,QAAQ,CAACrJ,UAAZ,GAAyBR,mBAFlC,CADF;QAKA,IAAMiK,cAAc,GAClB3G,KAAK,CAACkB,WAAN,CAAkBoF,SAAlB,aAAkBA,SAAlB,uBAAkBA,SAAS,CAAEzH,GAA7B,KAAqCwB,KAAK,CAACa,WAAN,CAAkBoF,SAAlB,aAAkBA,SAAlB,uBAAkBA,SAAS,CAAEzH,GAA7B,CADvC;QAGA,IAAM+H,kBAAkB,GACtB5G,KAAK,CAACkB,WAAN,CAAkBR,aAAlB,aAAkBA,aAAlB,uBAAkBA,aAAa,CAAE7B,GAAjC,KACAwB,KAAK,CAACa,WAAN,CAAkBR,aAAlB,aAAkBA,aAAlB,uBAAkBA,aAAa,CAAE7B,GAAjC,CAFF;QAUA,IAAMgI,0BAA0B,GAC9B7J,KAAK,KAAKgH,IAAI,CAACtB,MAAL,GAAc,CAAxB,IACAiE,cADA,IAEAA,cAAc,CAAC9J,OAAf,CAAuBmC,YAAvB,KAAwC,kBAFxC,GAGI2H,cAAc,CAAC9J,OAHnB,GAIIK,UAAU,CAACL,OALjB;QAOA,IAAIiK,uBAAuB,GACzBD,0BAA0B,CAAC7H,YAA3B,KAA4C,OAA5C,GACIE,kCADJ,GAEI2H,0BAA0B,CAAC7H,YAA3B,KAA4C,kBAA5C,GACA+H,sCADA,GAEA5H,oCALN;QAOA,4BAcI0H,0BAdJ,CACEX,gBAAgB;UAAhBA,gBAAgB,sCAAGnE,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IACjBD,qBAAQ,CAACC,EAAT,KAAgB,SADC,IAEjBD,qBAAQ,CAACC,EAAT,KAAgB,OAHd;UAAA,yBAcF6E,0BAdJ,CAIEG,cAAc;UAAdA,cAAc,uCAAGjF,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyBkE,gBAJtC;UAAA,yBAcFW,0BAdJ,CAKE5H,gBAAgB;UAAhBA,gBAAgB,uCAAG6H,uBAAuB,CAAC7H,gBALvC;UAAA,yBAcF4H,0BAdJ,CAMEI,cAAc;UAAdA,cAAc,uCAAGH,uBAAuB,CAACG,cANrC;UAAA,yBAcFJ,0BAdJ,CAOE5J,qBAAqB;UAArBA,qBAAqB,uCAAGiJ,gBAAgB,KAAK,KAArB,GACpBgB,sCADoB,GAEpBJ,uBAAuB,CAAC7J,qBATxB;UAAA,yBAcF4J,0BAdJ,CAUEM,uBAAuB;UAAvBA,uBAAuB,uCAAGL,uBAAuB,CAACK,uBAV9C;UAAA,yBAcFN,0BAdJ,CAWEO,kBAAkB;UAAlBA,kBAAkB,uCAAIrF,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,IACpB6E,0BAA0B,CAAC7H,YAA3B,KAA4C,kBADzB,IAEnBrB,gCAAsB,EAACV,qBAAD;QAG1B,IAAMqF,UAA2B,4BAC/BpF,UAAU,CAACL,OAAX,CAAmByF,UADY,yEAE9B,EACCuE,0BAA0B,CAAC7H,YAA3B,KAA4C,OAA5C,IACA6H,0BAA0B,CAAC7H,YAA3B,KAA4C,kBAD5C,IAEA,eAAc,SAAd,kBAAc,WAAd,0BAAc,CAAEnC,OAAhB,CAAwBmC,YAAxB,MAAyC,OAFzC,IAGA,eAAc,SAAd,kBAAc,WAAd,0BAAc,CAAEnC,OAAhB,CAAwBmC,YAAxB,MAAyC,kBAHzC,IAIArB,gCAAsB,EAACV,qBAAD,CALvB,KAOD8E,qBAAQ,CAACC,EAAT,KAAgB,KAPf,IAQD9E,UAAU,CAACL,OAAX,CAAmBwK,MAAnB,KAA8BxG,SAR7B,GASG,OATH,GAUG,QAZN;QAcA,IAAMrD,KAAK,GAAG;UACZoB,KADY,EACZA,KADY;UAEZ1B,UAAU,kCACLA,UADO;YAEVL,OAAO,kCACFK,UAAU,CAACL,OADP;cAEPqJ,gBAFO,EAEPA,gBAFO;cAGPkB,kBAHO,EAGPA,kBAHO;cAIPnK,qBAJO,EAIPA,qBAJO;cAKPgC,gBALO,EAKPA,gBALO;cAMP+H,cANO,EAMPA,cANO;cAOPG,uBAPO,EAOPA,uBAPO;cAQPF,cARO,EAQPA,cARO;cASP3E;YAAAA;UATO,EAJC;UAgBZ+B,QAAQ,EAAE;YACRC,OAAO,EAAEjF,sBAAsB,CAC7BmH,cAD6B,EAE7BnG,KAAK,CAACrC,MAFuB,EAG7Bd,UAH6B,CADvB;YAMRoK,IAAI,EACFZ,WAAW,IACX,eAAc,SAAd,kBAAc,WAAd,0BAAc,CAAE7J,OAAhB,CAAwBmC,YAAxB,MAAyC,kBADzC,GAEIK,sBAAsB,CACpBqH,WADoB,EAEpBrG,KAAK,CAACrC,MAFc,EAGpB2I,cAHoB,CAF1B,GAOI9F,SAdE;YAeR5C,QAAQ,EAAEwI,eAAe,GACrBpH,sBAAsB,CACpBoH,eADoB,EAEpBpG,KAAK,CAACrC,MAFc,EAGpB4I,kBAHoB,CADD,GAMrB/F;UArBI,CAhBE;UAuCZ0G,MAAM,EAAE,CACNlH,KAAK,CAACrC,MADA,EAENd,UAFM,EAGNyJ,cAHM,EAINC,kBAJM,EAKNJ,cALM,EAMNE,WANM,EAOND,eAPM;QAvCI,CAAd;QAkDA,IACEF,QAAQ,IACR/I,KAAK,CAAC+J,MAAN,CAAaC,KAAb,CAAmB,UAACC,EAAD,EAAKrK,CAAL,EAAW;UAE5B,OAAOmJ,QAAQ,CAACgB,MAAT,CAAgBnK,CAAhB,MAAuBqK,EAA9B;QACD,CAHD,CAFF,EAME;UACA,OAAOlB,QAAP;QACD;QAED,OAAO/I,KAAP;MACD,CAvIc,CAAf;MAyIA,OAAO;QACLgD,MAAM,EAAER,KAAK,CAACQ,MADT;QAELzD,MAFK,EAELA,MAFK;QAGL+D,QAHK,EAGLA,QAHK;QAILI,WAAW,EAAElB,KAAK,CAACkB,WAJd;QAKLZ,aAAa,EAAEzC,gBAAgB,CAC7Bd,MAD6B,EAE7BiD,KAAK,CAAClC,MAFuB,EAG7BkC,KAAK,CAACjC,mBAHuB,EAI7BiC,KAAK,CAACvC,aAJuB,EAK7B4C,KAAK,CAACrC,MALuB,EAM7BqC,KAAK,CAACC,aANuB;MAL1B,CAAP;IAcD;EAAA;EAAA;AAAA,EAnLoC0C,KAAK,CAAC0E,SAA9B;AAAA;AA2ef,IAAMnE,MAAM,GAAG9E,uBAAU,CAACkJ,MAAX,CAAkB;EAC/B9D,SAAS,EAAE;IACT+D,IAAI,EAAE;EADG,CADoB;EAI/BnE,QAAQ,EAAE;IACRoE,QAAQ,EAAE,UADF;IAERvJ,GAAG,EAAE,CAFG;IAGRyG,IAAI,EAAE,CAHE;IAIRJ,KAAK,EAAE;EAJC,CAJqB;EAU/BnB,QAAQ,EAAE;IACRsE,MAAM,EAAE;EADA;AAVqB,CAAlB,CAAf","names":["EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","_scenes$i","getIsModal","scene","isParentModal","isModalPresentation","getIsModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","key","getDefaultHeaderHeight","getDistanceFromOptions","presentation","gestureDirection","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","constructor","props","_defineProperty","e","nativeEvent","setState","state","headerHeights","previousHeight","routes","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","SafeAreaProviderCompat","initialMetrics","frame","descriptors","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","OS","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerMode","headerTransparent","headerShown","activeScreensLimit","length","detachPreviousScreen","map","lastIndexOf","forModalPresentationIOS","floatingHeader","React","Fragment","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","Background","MaybeScreenContainer","enabled","container","onLayout","handleLayout","self","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerBackgroundColor","backgroundColor","headerDarkContent","Color","isDark","isNextScreenTransparent","detachCurrentScreen","MaybeScreen","absoluteFill","active","pointerEvents","CardContainer","modal","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","animationEnabled","Animated","Value","openingRouteKeys","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","ModalFadeTransition","gestureEnabled","transitionSpec","forNoAnimationCard","headerStyleInterpolator","cardOverlayEnabled","header","next","__memo","every","it","Component","create","flex","position","zIndex"],"sources":["CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}