{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaybeScreen = exports.MaybeScreenContainer = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _excluded = [\"enabled\"],\n  _excluded2 = [\"enabled\", \"active\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Screens;\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\nvar MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  if (Screens != null) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n  return React.createElement(_reactNative.View, rest);\n};\nexports.MaybeScreenContainer = MaybeScreenContainer;\nvar MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n    active = _ref2.active,\n    rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n  if (Screens != null) {\n    return React.createElement(Screens.Screen, _extends({\n      enabled: enabled,\n      activityState: active\n    }, rest));\n  }\n  return React.createElement(_reactNative.View, rest);\n};\nexports.MaybeScreen = MaybeScreen;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAAA;EAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAEA,IAAIA,OAAJ;AAEA,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CAEX;AAEM,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoB,OAM3B;EAAA,IALJC,OADmC,QACnCA,OADmC;IAEhCC;EAKH,IAAIL,OAAO,IAAI,IAAf,EAAqB;IACnB,OAAOM,oBAACN,OAAD,CAASO,eAAT;MAAyBH,OAAO,EAAEA;IAAlC,GAA+CC,IAA/C,EAAP;EACD;EAED,OAAOC,oBAACE,iBAAD,EAAUH,IAAV,CAAP;AACD,CAZM;AAAA;AAcA,IAAMI,WAAW,GAAG,SAAdA,WAAW,QAQlB;EAAA,IAPJL,OAD0B,SAC1BA,OAD0B;IAE1BM,MAF0B,SAE1BA,MAF0B;IAGvBL;EAMH,IAAIL,OAAO,IAAI,IAAf,EAAqB;IACnB,OACEM,oBAACN,OAAD,CAASW,MAAT;MAAgBP,OAAO,EAAEA,OAAzB;MAAkCQ,aAAa,EAAEF;IAAjD,GAA6DL,IAA7D,EADF;EAGD;EAED,OAAOC,oBAACE,iBAAD,EAAUH,IAAV,CAAP;AACD,CAhBM;AAAA","names":["Screens","require","e","MaybeScreenContainer","enabled","rest","React","ScreenContainer","View","MaybeScreen","active","Screen","activityState"],"sources":["Screens.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return (\n      <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"script"}