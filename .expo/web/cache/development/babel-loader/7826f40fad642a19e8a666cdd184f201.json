{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.persistor = exports.store = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\nvar _redux = require(\"redux\");\nvar _effects = require(\"redux-saga/effects\");\nvar _reduxPersist = require(\"redux-persist\");\nvar _toolkit = require(\"@reduxjs/toolkit\");\nvar _reduxSaga = _interopRequireDefault(require(\"redux-saga\"));\nvar _appSlice = require(\"./appSlice\");\nvar _myListSlice = _interopRequireDefault(require(\"../features/myList/myListSlice\"));\nvar rootReducers = (0, _redux.combineReducers)({\n  app: _appSlice.appReducer,\n  myList: _myListSlice.default\n});\nvar sagaMiddleware = (0, _reduxSaga.default)();\nvar rootSaga = _regenerator.default.mark(function rootSaga() {\n  return _regenerator.default.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, _effects.all)([]);\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, rootSaga);\n});\nvar persistConfig = {\n  key: 'root',\n  storage: _asyncStorage.default,\n  whitelist: ['app', 'myList']\n};\nvar persistedReducer = (0, _reduxPersist.persistReducer)(persistConfig, rootReducers);\nvar store = (0, _toolkit.configureStore)({\n  reducer: persistedReducer,\n  middleware: function middleware(getDefaultMiddleware) {\n    var middlewares = getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [_reduxPersist.FLUSH, _reduxPersist.REHYDRATE, _reduxPersist.PAUSE, _reduxPersist.PERSIST, _reduxPersist.PURGE, _reduxPersist.REGISTER]\n      }\n    });\n    middlewares.push(sagaMiddleware);\n    return middlewares;\n  }\n});\nexports.store = store;\nsagaMiddleware.run(rootSaga);\nvar persistor = (0, _reduxPersist.persistStore)(store);\nexports.persistor = persistor;","map":{"version":3,"names":["rootReducers","combineReducers","app","appReducer","myList","myListReducer","sagaMiddleware","createSagaMiddleware","rootSaga","all","persistConfig","key","storage","AsyncStorage","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","middlewares","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","push","run","persistor","persistStore"],"sources":["D:/EPU/kÃ¬ 1 2022-2023/ltmobile/muvi-master/src/store/store.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport {\n  persistReducer,\n  persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { appReducer } from './appSlice';\nimport myListReducer from '@features/myList/myListSlice';\n\nconst rootReducers = combineReducers({\n  app: appReducer,\n  myList: myListReducer,\n});\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootSaga = function* rootSaga() {\n  yield all([]);\n};\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['app', 'myList'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducers);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => {\n    const middlewares = getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    });\n\n    middlewares.push(sagaMiddleware);\n\n    // if (__DEV__ && !process.env.JEST_WORKER_ID) {\n    //   const createDebugger = require('redux-flipper').default;\n    //   middlewares.push(createDebugger());\n    // }\n\n    return middlewares;\n  },\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof rootReducers>;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA,IAAMA,YAAY,GAAG,IAAAC,sBAAe,EAAC;EACnCC,GAAG,EAAEC,oBAAU;EACfC,MAAM,EAAEC;AACV,CAAC,CAAC;AACF,IAAMC,cAAc,GAAG,IAAAC,kBAAoB,GAAE;AAE7C,IAAMC,QAAQ,6BAAG,SAAUA,QAAQ;EAAA;IAAA;MAAA;QAAA;UAAA;UACjC,OAAM,IAAAC,YAAG,EAAC,EAAE,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,GADYD,QAAQ;AAAA,CAElC;AAED,IAAME,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAEC,qBAAY;EACrBC,SAAS,EAAE,CAAC,KAAK,EAAE,QAAQ;AAC7B,CAAC;AAED,IAAMC,gBAAgB,GAAG,IAAAC,4BAAc,EAACN,aAAa,EAAEV,YAAY,CAAC;AAE7D,IAAMiB,KAAK,GAAG,IAAAC,uBAAc,EAAC;EAClCC,OAAO,EAAEJ,gBAAgB;EACzBK,UAAU,EAAE,oBAACC,oBAAoB,EAAK;IACpC,IAAMC,WAAW,GAAGD,oBAAoB,CAAC;MACvCE,iBAAiB,EAAE;QACjBC,cAAc,EAAE,CAACC,mBAAK,EAAEC,uBAAS,EAAEC,mBAAK,EAAEC,qBAAO,EAAEC,mBAAK,EAAEC,sBAAQ;MACpE;IACF,CAAC,CAAC;IAEFR,WAAW,CAACS,IAAI,CAACzB,cAAc,CAAC;IAOhC,OAAOgB,WAAW;EACpB;AACF,CAAC,CAAC;AAAC;AAEHhB,cAAc,CAAC0B,GAAG,CAACxB,QAAQ,CAAC;AAErB,IAAMyB,SAAS,GAAG,IAAAC,0BAAY,EAACjB,KAAK,CAAC;AAAC"},"metadata":{},"sourceType":"script"}